const { EmbedBuilder } = require('discord.js');
const { createBankingProfile, calculateBankInterest, formatTransactionHistory, addTransaction } = require('../utils/dataUtils');
const { defaultUserState } = require('../config/constants');

function handleBankCommand(message, userData) {
  const userId = message.author.id;
  const user = userData[userId] || defaultUserState;

  if (!user.banking) createBankingProfile(userId, userData);
  
  // T√≠nh l√£i tr∆∞·ªõc khi hi·ªÉn th·ªã
  const interestInfo = calculateBankInterest(userId, userData);

  // T√≠nh l√£i su·∫•t d·ª± ki·∫øn cho l·∫ßn ti·∫øp theo
  const expectedInterest = Math.floor(user.banking.balance * 0.0002);

  const embed = new EmbedBuilder()
    .setTitle('üè¶ NG√ÇN H√ÄNG')
    .addFields(
      { name: 'üí∞ S·ªë d∆∞ t√†i kho·∫£n', value: `${user.banking.balance.toLocaleString('vi-VN')} VND`, inline: true },
      { name: 'üí∏ Th√¥ng tin l√£i su·∫•t', value: 
        `T·ª∑ l·ªá: 0.02% / 5 ph√∫t\n` +
        `L√£i v·ª´a nh·∫≠n: ${interestInfo.interest.toLocaleString('vi-VN')} VND\n` +
        `L√£i d·ª± ki·∫øn: ${expectedInterest.toLocaleString('vi-VN')} VND\n` +
        `‚è∞ C√≤n ${interestInfo.timeUntilNext} ph√∫t t·ªõi l·∫ßn nh·∫≠n l√£i ti·∫øp theo`, inline: false },
      { name: 'üíµ Ti·ªÅn m·∫∑t', value: `${user.money.toLocaleString('vi-VN')} VND`, inline: true },
      { name: 'üìÖ Ng√†y m·ªü TK', value: new Date(user.banking.createdAt).toLocaleDateString('vi-VN'), inline: true },
      { name: 'üìù DANH S√ÅCH L·ªÜNH', value: 
        '`!deposit <s·ªë ti·ªÅn>` - N·∫°p ti·ªÅn v√†o t√†i kho·∫£n\n' +
        '`!withdraw <s·ªë ti·ªÅn>` - R√∫t ti·ªÅn t·ª´ t√†i kho·∫£n\n' +
        '`!transfer <@user> <s·ªë ti·ªÅn> [ghi ch√∫]` - Chuy·ªÉn ti·ªÅn cho ng∆∞·ªùi kh√°c\n' +
        '`!history` - Xem l·ªãch s·ª≠ giao d·ªãch', inline: false }
    )
    .setColor('#00FF00');

  return message.reply({ embeds: [embed] });
}

function handleDepositCommand(message, args, userData, saveData) {
  const userId = message.author.id;
  const user = userData[userId] || defaultUserState;

  if (!user.banking) createBankingProfile(userId, userData);

  let amount;
  const amountArg = args[0];
  
  if (amountArg.toLowerCase() === 'all') {
    amount = user.money;
  } else {
    amount = parseInt(amountArg);
  }

  if (!amount || amount <= 0) {
    return message.reply('‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá!\nS·ª≠ d·ª•ng `!deposit all` ƒë·ªÉ n·∫°p to√†n b·ªô ti·ªÅn m·∫∑t.');
  }

  if (user.money < amount) {
    return message.reply('‚ùå B·∫°n kh√¥ng ƒë·ªß ti·ªÅn m·∫∑t ƒë·ªÉ n·∫°p!');
  }

  user.money -= amount;
  user.banking.balance += amount;
  addTransaction(userId, 'deposit', amount, 'N·∫°p ti·ªÅn v√†o t√†i kho·∫£n', null, userData);
  saveData(userData);

  const embed = new EmbedBuilder()
    .setTitle('üì• N·∫†P TI·ªÄN TH√ÄNH C√îNG')
    .addFields(
      { name: 'üí∞ S·ªë ti·ªÅn n·∫°p', value: `${amount.toLocaleString('vi-VN')} VND`, inline: true },
      { name: 'üí≥ S·ªë d∆∞ m·ªõi', value: `${user.banking.balance.toLocaleString('vi-VN')} VND`, inline: true },
      { name: 'üíµ Ti·ªÅn m·∫∑t c√≤n l·∫°i', value: `${user.money.toLocaleString('vi-VN')} VND`, inline: true }
    )
    .setColor('#00FF00');

  return message.reply({ embeds: [embed] });
}

function handleWithdrawCommand(message, args, userData, saveData) {
  const userId = message.author.id;
  const user = userData[userId] || defaultUserState;

  if (!user.banking) createBankingProfile(userId, userData);

  let amount;
  const amountArg = args[0];
  
  if (amountArg.toLowerCase() === 'all') {
    amount = user.banking.balance;
  } else {
    amount = parseInt(amountArg);
  }

  if (!amount || amount <= 0) {
    return message.reply('‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá!\nS·ª≠ d·ª•ng `!withdraw all` ƒë·ªÉ r√∫t to√†n b·ªô s·ªë d∆∞.');
  }

  if (user.banking.balance < amount) {
    return message.reply('‚ùå S·ªë d∆∞ t√†i kho·∫£n kh√¥ng ƒë·ªß!');
  }

  user.banking.balance -= amount;
  user.money += amount;
  addTransaction(userId, 'withdraw', amount, 'R√∫t ti·ªÅn t·ª´ t√†i kho·∫£n', null, userData);
  saveData(userData);

  const embed = new EmbedBuilder()
    .setTitle('üì§ R√öT TI·ªÄN TH√ÄNH C√îNG')
    .addFields(
      { name: 'üí∞ S·ªë ti·ªÅn r√∫t', value: `${amount.toLocaleString('vi-VN')} VND`, inline: true },
      { name: 'üí≥ S·ªë d∆∞ c√≤n l·∫°i', value: `${user.banking.balance.toLocaleString('vi-VN')} VND`, inline: true },
      { name: 'üíµ Ti·ªÅn m·∫∑t hi·ªán c√≥', value: `${user.money.toLocaleString('vi-VN')} VND`, inline: true }
    )
    .setColor('#00FF00');

  return message.reply({ embeds: [embed] });
}

function handleTransferCommand(message, args, userData, saveData) {
  const userId = message.author.id;
  const user = userData[userId] || defaultUserState;

  if (!user.banking) createBankingProfile(userId, userData);

  if (args.length < 2) {
    return message.reply('‚ùå C√∫ ph√°p: `!transfer <@user> <s·ªë ti·ªÅn> [ghi ch√∫]`');
  }

  const targetId = args[0].replace(/[<@!>]/g, '');
  if (targetId === userId) {
    return message.reply('‚ùå B·∫°n kh√¥ng th·ªÉ chuy·ªÉn ti·ªÅn cho ch√≠nh m√¨nh!');
  }

  let amount;
  if (args[1].toLowerCase() === 'all') {
    amount = user.banking.balance;
    if (amount <= 0) {
      return message.reply('‚ùå S·ªë d∆∞ t√†i kho·∫£n c·ªßa b·∫°n l√† 0 VND!');
    }
  } else {
    amount = parseInt(args[1]);
    if (isNaN(amount)) {
      return message.reply('‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá!\nüí° V√≠ d·ª•: `!transfer <@user> 100000` ho·∫∑c `!transfer <@user> all`');
    }
  }

  if (amount < 1) {
    return message.reply('‚ùå S·ªë ti·ªÅn chuy·ªÉn ph·∫£i l·ªõn h∆°n 0 VND!');
  }

  if (user.banking.balance < amount) {
    return message.reply(`‚ùå S·ªë d∆∞ t√†i kho·∫£n kh√¥ng ƒë·ªß!\nüí∞ S·ªë d∆∞ hi·ªán t·∫°i: ${user.banking.balance.toLocaleString('vi-VN')} VND`);
  }

  const targetUser = userData[targetId];
  if (!targetUser) {
    return message.reply('‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi nh·∫≠n!');
  }

  if (!targetUser.banking) createBankingProfile(targetId, userData);

  const note = args.slice(2).join(' ') || 'Kh√¥ng c√≥ ghi ch√∫';

  // Th·ª±c hi·ªán chuy·ªÉn ti·ªÅn
  user.banking.balance -= amount;
  targetUser.banking.balance += amount;

  // Ghi transaction cho c·∫£ 2 b√™n
  addTransaction(userId, 'transfer_out', amount, note, targetId, userData);
  addTransaction(targetId, 'transfer_in', amount, note, userId, userData);
  
  saveData(userData);

  const embed = new EmbedBuilder()
    .setTitle('üí∏ CHUY·ªÇN TI·ªÄN TH√ÄNH C√îNG')
    .addFields(
      { name: 'üë• Ng∆∞·ªùi nh·∫≠n', value: `<@${targetId}>`, inline: true },
      { name: 'üí∞ S·ªë ti·ªÅn', value: `${amount.toLocaleString('vi-VN')} VND`, inline: true },
      { name: 'üí≥ S·ªë d∆∞ c√≤n l·∫°i', value: `${user.banking.balance.toLocaleString('vi-VN')} VND`, inline: true },
      { name: 'üí¨ Ghi ch√∫', value: note, inline: false }
    )
    .setColor('#00FF00');

  message.reply({ embeds: [embed] });

  // G·ª≠i th√¥ng b√°o cho ng∆∞·ªùi nh·∫≠n
  const notifyEmbed = new EmbedBuilder()
    .setTitle('üí∞ NH·∫¨N TI·ªÄN TH√ÄNH C√îNG')
    .addFields(
      { name: 'üë§ Ng∆∞·ªùi g·ª≠i', value: `<@${userId}>`, inline: true },
      { name: 'üí∞ S·ªë ti·ªÅn', value: `${amount.toLocaleString('vi-VN')} VND`, inline: true },
      { name: 'üí≥ S·ªë d∆∞ m·ªõi', value: `${targetUser.banking.balance.toLocaleString('vi-VN')} VND`, inline: true },
      { name: 'üí¨ Ghi ch√∫', value: note, inline: false }
    )
    .setColor('#00FF00');

  const targetMember = message.guild.members.cache.get(targetId);
  if (targetMember) {
    targetMember.send({ embeds: [notifyEmbed] }).catch(() => {
      // N·∫øu kh√¥ng g·ª≠i ƒë∆∞·ª£c DM, g·ª≠i v√†o k√™nh hi·ªán t·∫°i
      message.channel.send({ content: `<@${targetId}>`, embeds: [notifyEmbed] });
    });
  }
}

function handleHistoryCommand(message, userData, saveData) {
  const userId = message.author.id;
  const user = userData[userId] || defaultUserState;

  if (!user.banking) createBankingProfile(userId, userData);
  
  // T√≠nh l√£i tr∆∞·ªõc khi hi·ªÉn th·ªã l·ªãch s·ª≠
  calculateBankInterest(userId, userData);

  const history = formatTransactionHistory(user.banking.transactions, userData);
  
  const embed = new EmbedBuilder()
    .setTitle('üìú L·ªäCH S·ª¨ GIAO D·ªäCH')
    .setDescription(history)
    .addFields(
      { name: 'üí≥ S·ªë d∆∞ hi·ªán t·∫°i', value: `${user.banking.balance.toLocaleString('vi-VN')} VND`, inline: true },
      { name: 'üíµ Ti·ªÅn m·∫∑t', value: `${user.money.toLocaleString('vi-VN')} VND`, inline: true }
    )
    .setColor('#4169E1')
    .setFooter({ text: 'Hi·ªÉn th·ªã 10 giao d·ªãch g·∫ßn nh·∫•t' });

  return message.reply({ embeds: [embed] });
}

module.exports = {
  handleBankCommand,
  handleDepositCommand,
  handleWithdrawCommand,
  handleTransferCommand,
  handleHistoryCommand
};