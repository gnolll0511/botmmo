const { token, ownerId } = require('./config.js');

const profileProcessing = new Map();
const commandCooldown = new Map();
const { Client, GatewayIntentBits, EmbedBuilder } = require('discord.js');
const fs = require('fs');

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildPresences, // ƒê·ªÉ check online status
    GatewayIntentBits.GuildVoiceStates, // For voice state updates
    GatewayIntentBits.GuildMessageReactions, // For reaction collectors
  ],
});

const dataFile = './userData.json';

// Load user data
let userData = {};
if (fs.existsSync(dataFile)) {
  userData = JSON.parse(fs.readFileSync(dataFile, 'utf8'));
}

// Save user data
function saveData() {
  fs.writeFileSync(dataFile, JSON.stringify(userData, null, 2));
}

// Banking functions
function createBankingProfile(userId) {
  if (!userData[userId].banking) {
    userData[userId].banking = {
      balance: 0,
      transactions: [],
      createdAt: new Date().toISOString()
    };
    saveData();
  }
  return userData[userId].banking;
}

function addTransaction(userId, type, amount, description, targetId = null) {
  if (!userData[userId].banking) createBankingProfile(userId);
  
  const transaction = {
    id: `T${Date.now()}${Math.floor(Math.random() * 1000)}`,
    type: type, // 'deposit', 'withdraw', 'transfer_in', 'transfer_out'
    amount: amount,
    description: description,
    targetId: targetId,
    timestamp: new Date().toISOString()
  };

  userData[userId].banking.transactions.push(transaction);
  
  // Gi·ªõi h·∫°n l·ªãch s·ª≠ giao d·ªãch ch·ªâ l∆∞u 50 giao d·ªãch g·∫ßn nh·∫•t
  if (userData[userId].banking.transactions.length > 50) {
    userData[userId].banking.transactions = userData[userId].banking.transactions.slice(-50);
  }
  
  saveData();
  return transaction;
}

function formatTransactionHistory(transactions, userData) {
  let history = '';
  const recentTransactions = transactions.slice(-10).reverse(); // 10 giao d·ªãch g·∫ßn nh·∫•t
  
  for (const tx of recentTransactions) {
    const date = new Date(tx.timestamp).toLocaleString('vi-VN');
    let line = `[${date}] `;
    
    switch (tx.type) {
      case 'deposit':
        line += `üì• N·∫°p ti·ªÅn: +${tx.amount.toLocaleString('vi-VN')} VND`;
        break;
      case 'withdraw':
        line += `üì§ R√∫t ti·ªÅn: -${tx.amount.toLocaleString('vi-VN')} VND`;
        break;
      case 'transfer_out':
        const targetName = tx.targetId ? `<@${tx.targetId}>` : 'Unknown';
        line += `üí∏ Chuy·ªÉn cho ${targetName}: -${tx.amount.toLocaleString('vi-VN')} VND`;
        break;
      case 'transfer_in':
        const senderName = tx.targetId ? `<@${tx.targetId}>` : 'Unknown';
        line += `üí∞ Nh·∫≠n t·ª´ ${senderName}: +${tx.amount.toLocaleString('vi-VN')} VND`;
        break;
    }
    
    if (tx.description) line += `\nüí¨ Ghi ch√∫: ${tx.description}`;
    history += line + '\n\n';
  }
  
  return history || 'Ch∆∞a c√≥ giao d·ªãch n√†o.';
}

const lastMessageTime = new Map();

function getLevelInfo(xp) {
  let level = 1;
  let required = 0;
  while (xp >= required + (level * 100 + (level - 1) * 50)) {
    required += level * 100 + (level - 1) * 50;
    level++;
    if (level > 1000) break; // Cap at 1000
  }
  const nextRequired = level * 100 + (level - 1) * 50;
  const nextXp = nextRequired - (xp - required);
  return { level: Math.min(level, 1000), nextXp };
}

function checkLevelUp(user, message) {
  const { level: newLevel } = getLevelInfo(user.xp);
  if (newLevel > user.lastLevel) {
    if (newLevel % 5 === 0) {
      // H·ªôp qu√†: 3 random items + ti·ªÅn nh·ªè
      user.inventory = user.inventory || [];
      const receivedItems = [];
      for (let i = 0; i < 3; i++) {
        const item = getRandomItem();
        user.inventory.push(item);
        receivedItems.push(item.name);
      }
      user.money += 10000; // Ti·ªÅn nh·ªè
      message.reply(`üéâ Ch√∫c m·ª´ng l√™n level ${newLevel}! Nh·∫≠n h·ªôp qu√†: ${receivedItems.join(', ')} + 10,000 VND!`);
    } else {
      // Th∆∞·ªüng ti·ªÅn ng·∫´u nhi√™n tƒÉng d·∫ßn
      const minReward = 20000 + (newLevel - 1) * 5000;
      const maxReward = 50000 + (newLevel - 1) * 10000;
      const levelReward = Math.floor(Math.random() * (maxReward - minReward + 1)) + minReward;
      user.money += levelReward;
      message.reply(`üéâ Ch√∫c m·ª´ng l√™n level ${newLevel}! Th∆∞·ªüng: +${levelReward.toLocaleString('vi-VN')} VND!`);
    }
    user.lastLevel = newLevel;
  }
}

// Items c√≥ ƒë·ªô hi·∫øm (d√†nh cho h·ªôp qu√†, event,...)
const rareItems = {
  basic: [
    { id: 'B1', name: '√Åo thun limited', sellPrice: 5000 },
    { id: 'B2', name: 'Qu·∫ßn jean r√°ch', sellPrice: 10000 },
    { id: 'B3', name: 'Gi√†y th·ªÉ thao special', sellPrice: 15000 },
    { id: 'B4', name: '√Åo kho√°c phi√™n b·∫£n gi·ªõi h·∫°n', sellPrice: 20000 },
  ],
  accessory: [
    { id: 'A1', name: 'V√≤ng tay pha l√™', sellPrice: 30000 },
    { id: 'A2', name: 'Nh·∫´n b·∫°c ƒë·∫∑c bi·ªát', sellPrice: 50000 },
    { id: 'A3', name: 'K√≠nh r√¢m th·ªùi th∆∞·ª£ng', sellPrice: 40000 },
    { id: 'A4', name: 'D√¢y chuy·ªÅn kim c∆∞∆°ng', sellPrice: 45000 },
  ],
  ultra: [
    { id: 'U1', name: 'Set ƒë·ªì cao c·∫•p', sellPrice: 100000 },
    { id: 'U2', name: 'M≈© hi·ªáu ·ª©ng', sellPrice: 80000 },
    { id: 'U3', name: 'T√∫i x√°ch branded', sellPrice: 120000 },
  ],
  ultra_rare: [
    { id: 'UR1', name: 'Set trang ph·ª•c limited', sellPrice: 200000 },
    { id: 'UR2', name: 'Trang ph·ª•c legendary', sellPrice: 250000 },
    { id: 'UR3', name: 'Set ph·ª• ki·ªán qu√Ω ph√°i', sellPrice: 180000 },
  ],
  super_ultra_rare: [
    { id: 'SUR1', name: 'Trang ph·ª•c th·∫ßn tho·∫°i', sellPrice: 5000000 },
    { id: 'SUR2', name: 'Set ƒë·ªì huy·ªÅn b√≠', sellPrice: 6000000 },
    { id: 'SUR3', name: 'Ph·ª• ki·ªán v√¥ gi√°', sellPrice: 7000000 },
    { id: 'SUR4', name: '√Åo cho√†ng si√™u c·∫•p', sellPrice: 8000000 },
  ],
  ssur: [
    { id: 'SSUR1', name: 'Set trang ph·ª•c t·ªëi th∆∞·ª£ng', sellPrice: 20000000 },
    { id: 'SSUR2', name: 'Trang ph·ª•c th·∫ßn linh', sellPrice: 24000000 },
    { id: 'SSUR3', name: 'Set ph·ª• ki·ªán huy·ªÅn tho·∫°i', sellPrice: 28000000 },
    { id: 'SSUR4', name: '√Åo cho√†ng vƒ©nh c·ª≠u', sellPrice: 32000000 },
  ],
};

// Shop items (kh√¥ng c√≥ ƒë·ªô hi·∫øm)
// Shop items

const shopItems = {
  fashion: [
    // ƒê·ªì b√¨nh d√¢n (Ch·ª£ - CH)
    { id: 'FASHION_CH1', displayId: '#CH1', name: '√Åo thun ch·ª£', price: 50000, brand: 'Ch·ª£', type: '√Åo', tier: 'B√¨nh d√¢n' },
    { id: 'FASHION_CH2', displayId: '#CH2', name: 'Qu·∫ßn jean ch·ª£', price: 100000, brand: 'Ch·ª£', type: 'Qu·∫ßn', tier: 'B√¨nh d√¢n' },
    { id: 'FASHION_CH3', displayId: '#CH3', name: 'Gi√†y d√©p ch·ª£', price: 80000, brand: 'Ch·ª£', type: 'Gi√†y', tier: 'B√¨nh d√¢n' },
    
    // Local Brand b√¨nh d√¢n (Local - LB)
    { id: 'FASHION_LB1', displayId: '#LB1', name: '√Åo thun Yame', price: 200000, brand: 'Yame', type: '√Åo', tier: 'Local Brand' },
    { id: 'FASHION_LB2', displayId: '#LB2', name: 'Qu·∫ßn jean Routine', price: 350000, brand: 'Routine', type: 'Qu·∫ßn', tier: 'Local Brand' },
    { id: 'FASHION_LB3', displayId: '#LB3', name: 'Gi√†y Bitis Hunter', price: 500000, brand: 'Bitis', type: 'Gi√†y', tier: 'Local Brand' },

    // Th∆∞∆°ng hi·ªáu ph·ªï th√¥ng (Basic - BS)
    { id: 'FASHION_BS1', displayId: '#BS1', name: '√Åo Uniqlo', price: 500000, brand: 'Uniqlo', type: '√Åo', tier: 'Ph·ªï th√¥ng' },
    { id: 'FASHION_BS2', displayId: '#BS2', name: 'Qu·∫ßn H&M', price: 800000, brand: 'H&M', type: 'Qu·∫ßn', tier: 'Ph·ªï th√¥ng' },
    { id: 'FASHION_BS3', displayId: '#BS3', name: 'Gi√†y Adidas Neo', price: 1200000, brand: 'Adidas', type: 'Gi√†y', tier: 'Ph·ªï th√¥ng' },

    // Th∆∞∆°ng hi·ªáu cao c·∫•p (Premium - PR)
    { id: 'FASHION_PR1', displayId: '#PR1', name: '√Åo Polo Lacoste', price: 2500000, brand: 'Lacoste', type: '√Åo', tier: 'Cao c·∫•p' },
    { id: 'FASHION_PR2', displayId: '#PR2', name: 'Qu·∫ßn Versace Jeans', price: 5000000, brand: 'Versace', type: 'Qu·∫ßn', tier: 'Cao c·∫•p' },
    { id: 'FASHION_PR3', displayId: '#PR3', name: 'Gi√†y Nike Air Max', price: 4000000, brand: 'Nike', type: 'Gi√†y', tier: 'Cao c·∫•p' },

    // Th∆∞∆°ng hi·ªáu luxury (Luxury - LX)
    { id: 'FASHION_LX1', displayId: '#LX1', name: '√Åo Gucci Monogram', price: 15000000, brand: 'Gucci', type: '√Åo', tier: 'Luxury' },
    { id: 'FASHION_LX2', displayId: '#LX2', name: 'Qu·∫ßn Louis Vuitton', price: 20000000, brand: 'Louis Vuitton', type: 'Qu·∫ßn', tier: 'Luxury' },
    { id: 'FASHION_LX3', displayId: '#LX3', name: 'Gi√†y Balenciaga Triple S', price: 25000000, brand: 'Balenciaga', type: 'Gi√†y', tier: 'Luxury' },

    // Ph·ª• ki·ªán b√¨nh d√¢n (Accessory Basic - AB)
    { id: 'FASHION_AB1', displayId: '#AB1', name: 'M≈© l∆∞·ª°i trai local brand', price: 150000, brand: 'Local', type: 'Ph·ª• ki·ªán', tier: 'B√¨nh d√¢n' },
    { id: 'FASHION_AB2', displayId: '#AB2', name: 'T√∫i ƒëeo ch√©o Bitis', price: 300000, brand: 'Bitis', type: 'Ph·ª• ki·ªán', tier: 'B√¨nh d√¢n' },
    { id: 'FASHION_AB3', displayId: '#AB3', name: 'K√≠nh m√°t Uniqlo', price: 400000, brand: 'Uniqlo', type: 'Ph·ª• ki·ªán', tier: 'B√¨nh d√¢n' },

    // Ph·ª• ki·ªán cao c·∫•p (Accessory Premium - AP)
    { id: 'FASHION_AP1', displayId: '#AP1', name: 'T√∫i Coach', price: 8000000, brand: 'Coach', type: 'Ph·ª• ki·ªán', tier: 'Cao c·∫•p' },
    { id: 'FASHION_AP2', displayId: '#AP2', name: 'K√≠nh Ray-Ban', price: 5000000, brand: 'Ray-Ban', type: 'Ph·ª• ki·ªán', tier: 'Cao c·∫•p' },
    { id: 'FASHION_AP3', displayId: '#AP3', name: 'N√≥n Gucci', price: 12000000, brand: 'Gucci', type: 'Ph·ª• ki·ªán', tier: 'Cao c·∫•p' },

    // Ph·ª• ki·ªán luxury (Accessory Luxury - AL)
    { id: 'FASHION_AL1', displayId: '#AL1', name: 'T√∫i Hermes Birkin', price: 500000000, brand: 'Hermes', type: 'Ph·ª• ki·ªán', tier: 'Luxury' },
    { id: 'FASHION_AL2', displayId: '#AL2', name: 'K√≠nh Cartier Diamond', price: 200000000, brand: 'Cartier', type: 'Ph·ª• ki·ªán', tier: 'Luxury' },
    { id: 'FASHION_AL3', displayId: '#AL3', name: 'ƒê·ªìng h·ªì Rolex Daytona', price: 1000000000, brand: 'Rolex', type: 'Ph·ª• ki·ªán', tier: 'Luxury' }
  ],
  pets: [
    // Rank C - Th√∫ c∆∞ng ph·ªï th√¥ng
    { id: 'PET_1', displayId: '#TC1', name: 'M√®o Anh l√¥ng ng·∫Øn', price: 4000000, type: 'M√®o', food: 'C√°, th·ª©c ƒÉn m√®o', rarity: 'C' },
    { id: 'PET_2', displayId: '#TC2', name: 'Ch√≥ Corgi', price: 8000000, type: 'Ch√≥', food: 'Th·ª©c ƒÉn ch√≥, th·ªãt', rarity: 'C' },
    { id: 'PET_3', displayId: '#TC3', name: 'V·∫πt Nam M·ªπ', price: 5000000, type: 'Chim', food: 'H·∫°t, tr√°i c√¢y', rarity: 'C' },

    // Rank B - Th√∫ c∆∞ng ƒë·∫∑c bi·ªát
    { id: 'PET_4', displayId: '#TB1', name: 'M√®o Scottish Fold', price: 15000000, type: 'M√®o', food: 'C√°, th·ª©c ƒÉn m√®o cao c·∫•p', rarity: 'B' },
    { id: 'PET_5', displayId: '#TB2', name: 'Ch√≥ Husky Siberian', price: 20000000, type: 'Ch√≥', food: 'Th·ª©c ƒÉn ch√≥ cao c·∫•p, th·ªãt', rarity: 'B' },
    { id: 'PET_6', displayId: '#TB3', name: 'V·∫πt Macaw Xanh-V√†ng', price: 25000000, type: 'Chim', food: 'H·∫°t cao c·∫•p, tr√°i c√¢y', rarity: 'B' },

    // Rank A - Th√∫ c∆∞ng hi·∫øm
    { id: 'PET_7', displayId: '#TA1', name: 'M√®o Sphynx kh√¥ng l√¥ng', price: 40000000, type: 'M√®o', food: 'Th·ª±c ph·∫©m ƒë·∫∑c ch·∫ø cho m√®o Sphynx', rarity: 'A' },
    { id: 'PET_8', displayId: '#TA2', name: 'Ch√≥ Poodle Teacup', price: 50000000, type: 'Ch√≥', food: 'Th·ª©c ƒÉn cao c·∫•p ƒë·∫∑c ch·∫ø', rarity: 'A' },
    { id: 'PET_9', displayId: '#TA3', name: 'V·∫πt African Grey', price: 45000000, type: 'Chim', food: 'Th·ª©c ƒÉn nh·∫≠p kh·∫©u ƒë·∫∑c bi·ªát', rarity: 'A' },

    // Rank S - Th√∫ c∆∞ng qu√Ω hi·∫øm
    { id: 'PET_10', displayId: '#TS1', name: 'M√®o Bengal Exotic', price: 100000000, type: 'M√®o', food: 'Th·ª±c ph·∫©m cao c·∫•p ƒë·∫∑c ch·∫ø', rarity: 'S' },
    { id: 'PET_11', displayId: '#TS2', name: 'Ch√≥ Samoyed Tr·∫Øng Tinh', price: 120000000, type: 'Ch√≥', food: 'Th·ª©c ƒÉn cao c·∫•p nh·∫≠p kh·∫©u', rarity: 'S' },
    { id: 'PET_12', displayId: '#TS3', name: 'V·∫πt Hyacinth Macaw', price: 150000000, type: 'Chim', food: 'Th·ª©c ƒÉn ƒë·∫∑c ch·∫ø cao c·∫•p', rarity: 'S' },

    // Rank SS - Th√∫ c∆∞ng c·ª±c hi·∫øm
    { id: 'PET_13', displayId: '#TSS1', name: 'M√®o Maine Coon Kh·ªïng L·ªì', price: 200000000, type: 'M√®o', food: 'Th·ª±c ph·∫©m si√™u cao c·∫•p ƒë·∫∑c ch·∫ø', rarity: 'SS' },
    { id: 'PET_14', displayId: '#TSS2', name: 'Ch√≥ Alaskan Malamute Thu·∫ßn Ch·ªßng', price: 250000000, type: 'Ch√≥', food: 'Th·ª©c ƒÉn si√™u cao c·∫•p ƒë·∫∑c ch·∫ø', rarity: 'SS' },
    { id: 'PET_15', displayId: '#TSS3', name: 'V·∫πt Scarlet Macaw ƒê·ªôt Bi·∫øn', price: 300000000, type: 'Chim', food: 'Th·ª©c ƒÉn si√™u cao c·∫•p nh·∫≠p kh·∫©u', rarity: 'SS' },

    // Rank SSS - Th√∫ c∆∞ng si√™u hi·∫øm
    { id: 'PET_16', displayId: '#TSSS1', name: 'M√®o Savannah F1', price: 400000000, type: 'M√®o', food: 'Th·ª±c ph·∫©m si√™u cao c·∫•p nh·∫≠p kh·∫©u', rarity: 'SSS' },
    { id: 'PET_17', displayId: '#TSSS2', name: 'Ch√≥ Tibetan Mastiff Thu·∫ßn Ch·ªßng', price: 500000000, type: 'Ch√≥', food: 'Th·ª©c ƒÉn si√™u cao c·∫•p nh·∫≠p kh·∫©u', rarity: 'SSS' },
    { id: 'PET_18', displayId: '#TSSS3', name: 'V·∫πt Palm Cockatoo ƒê·ªôt Bi·∫øn', price: 550000000, type: 'Chim', food: 'Th·ª©c ƒÉn si√™u cao c·∫•p ƒë·∫∑c bi·ªát', rarity: 'SSS' },

    // Rank SSS+ - Th√∫ c∆∞ng huy·ªÅn tho·∫°i
    { id: 'PET_19', displayId: '#TSSS+1', name: 'M√®o Ashera Lai ƒê·∫∑c Bi·ªát', price: 800000000, type: 'M√®o', food: 'Th·ª±c ph·∫©m huy·ªÅn tho·∫°i ƒë·∫∑c ch·∫ø', rarity: 'SSS+' },
    { id: 'PET_20', displayId: '#TSSS+2', name: 'Ch√≥ Tibetan Mastiff B·∫°ch T·∫°ng', price: 900000000, type: 'Ch√≥', food: 'Th·ª©c ƒÉn huy·ªÅn tho·∫°i ƒë·∫∑c ch·∫ø', rarity: 'SSS+' },
    { id: 'PET_21', displayId: '#TSSS+3', name: 'V·∫πt Spix Macaw ƒê·ªôt Bi·∫øn', price: 1000000000, type: 'Chim', food: 'Th·ª©c ƒÉn huy·ªÅn tho·∫°i ƒë·∫∑c bi·ªát', rarity: 'SSS+' }
  ],
  vehicles: [
    // Ph∆∞∆°ng ti·ªán c∆° b·∫£n
    { id: 'VEHICLE_1', displayId: '#CB1', name: 'Xe ƒë·∫°p', price: 2500000, type: 'Xe ƒë·∫°p', fuel: 'Kh√¥ng c·∫ßn', tier: 'C∆° b·∫£n' },
    { id: 'VEHICLE_2', displayId: '#CB2', name: 'Xe m√°y 50cc', price: 7500000, type: 'Xe m√°y', fuel: 'XƒÉng', tier: 'C∆° b·∫£n' },
    { id: 'VEHICLE_3', displayId: '#CB3', name: 'Xe m√°y PCX', price: 15000000, type: 'Xe m√°y', fuel: 'XƒÉng', tier: 'C∆° b·∫£n' },

    // Xe ƒëi·ªán cao c·∫•p
    { id: 'VEHICLE_4', displayId: '#XD1', name: 'Xe h∆°i Vinfast VF5', price: 1000000000, type: '√î t√¥', fuel: 'ƒêi·ªán', tier: 'Cao c·∫•p' },
    { id: 'VEHICLE_5', displayId: '#XD2', name: 'Xe h∆°i Vinfast VF8', price: 2000000000, type: '√î t√¥', fuel: 'ƒêi·ªán', tier: 'Cao c·∫•p' },

    // Xe xƒÉng cao c·∫•p
    { id: 'VEHICLE_6', displayId: '#XX1', name: 'Mercedes C300', price: 3000000000, type: '√î t√¥', fuel: 'XƒÉng', tier: 'Cao c·∫•p' },
    { id: 'VEHICLE_7', displayId: '#XX2', name: 'BMW 7 Series', price: 5000000000, type: '√î t√¥', fuel: 'XƒÉng', tier: 'Cao c·∫•p' },

    // Ph∆∞∆°ng ti·ªán ƒë·∫∑c bi·ªát
    { id: 'VEHICLE_8', displayId: '#DB1', name: 'Du thuy·ªÅn Sea Ray', price: 10000000000, type: 'Thuy·ªÅn', fuel: 'D·∫ßu', tier: 'ƒê·∫∑c bi·ªát' },
    { id: 'VEHICLE_9', displayId: '#DB2', name: 'M√°y bay ri√™ng Cessna', price: 50000000000, type: 'M√°y bay', fuel: 'Nhi√™n li·ªáu m√°y bay', tier: 'ƒê·∫∑c bi·ªát' }
  ]
};

function getRandomItem() {
  const rand = Math.random();
  let rarity;
  if (rand < 0.4) rarity = 'basic';              // 40%
  else if (rand < 0.7) rarity = 'accessory';       // 30%
  else if (rand < 0.9) rarity = 'ultra';           // 20%
  else if (rand < 0.9999) rarity = 'ultra_rare';   // 9.99%
  else if (rand < 0.999999) rarity = 'super_ultra_rare'; // 0.0099%
  else rarity = 'ssur';                            // 0.0001%

  const list = rareItems[rarity];
  return list[Math.floor(Math.random() * list.length)];
}

function findItemById(searchId) {
  // T√¨m trong rare items
  for (const rarity in rareItems) {
    const item = rareItems[rarity].find(item => item.id === searchId);
    if (item) return { ...item, rarity, type: 'rare' };
  }
  
  // T√¨m trong shop items
  for (const category in shopItems) {
    const item = shopItems[category].find(item => 
      item.id === searchId || item.displayId === searchId);
    if (item) return { ...item, category, type: 'shop' };
  }
  
  return null;
}

function getAllItemsList(showDetails = false) {
  let result = '';
  const rarityEmojis = {
    basic: '‚ö™',
    accessory: 'üü¢',
    ultra: 'üîµ',
    ultra_rare: 'üü£',
    super_ultra_rare: 'üü°',
    ssur: 'üî¥'
  };
  
  const rarityNames = {
    basic: 'Th∆∞·ªùng',
    accessory: 'Ph·ª• ki·ªán',
    ultra: 'Hi·∫øm',
    ultra_rare: 'C·ª±c Hi·∫øm',
    super_ultra_rare: 'Si√™u Hi·∫øm',
    ssur: 'Th·∫ßn Tho·∫°i'
  };

  result += '**üéÅ V·∫¨T PH·∫®M HI·∫æM (EVENT/H·ªòP QU√Ä):**\n';
  for (const rarity in rareItems) {
    result += `\n${rarityEmojis[rarity]} **${rarityNames[rarity].toUpperCase()}:**\n`;
    rareItems[rarity].forEach(item => {
      if (showDetails) {
        result += `${item.id} - ${item.name} (${item.sellPrice.toLocaleString('vi-VN')} VND)\n`;
      } else {
        result += `${item.name}\n`;
      }
    });
  }
  return result;
}

function getShopItemsList(category = null, showDetails = false) {
  const categoryEmojis = {
    fashion: 'üëï',
    pets: 'üê±',
    vehicles: 'üöó'
  };

  const categoryNames = {
    fashion: 'TH·ªúI TRANG',
    pets: 'TH√ö C∆ØNG',
    vehicles: 'PH∆Ø∆†NG TI·ªÜN'
  };

  let result = '';
  
  if (category) {
    // Hi·ªÉn th·ªã m·ªôt danh m·ª•c
    const items = shopItems[category];
    if (!items) return 'Danh m·ª•c kh√¥ng t·ªìn t·∫°i!';

    result = `${categoryEmojis[category]} **${categoryNames[category]}:**\n\n`;
    items.forEach(item => {
      if (showDetails) {
        let details = `${item.displayId} | ${item.name} (${item.price.toLocaleString('vi-VN')} VND)`;
        if (item.type) details += `\nLo·∫°i: ${item.type}`;
        if (item.food) details += `\nTh·ª©c ƒÉn: ${item.food}`;
        if (item.fuel) details += `\nNhi√™n li·ªáu: ${item.fuel}`;
        if (item.rarity) details += `\nƒê·ªô hi·∫øm: ${item.rarity}`;
        if (item.brand) details += `\nTh∆∞∆°ng hi·ªáu: ${item.brand}`;
        result += `${details}\n\n`;
      } else {
        result += `${item.displayId} | ${item.name} - ${item.price.toLocaleString('vi-VN')} VND\n`;
      }
    });
  } else {
    // Hi·ªÉn th·ªã t·∫•t c·∫£ danh m·ª•c
    for (const cat in shopItems) {
      result += `${categoryEmojis[cat]} **${categoryNames[cat]}:**\n`;
      shopItems[cat].forEach(item => {
        if (showDetails) {
          let details = `${item.id} - ${item.name} (${item.price.toLocaleString('vi-VN')} VND)`;
          if (item.type) details += `\nLo·∫°i: ${item.type}`;
          if (item.food) details += `\nTh·ª©c ƒÉn: ${item.food}`;
          if (item.fuel) details += `\nNhi√™n li·ªáu: ${item.fuel}`;
          result += `${details}\n\n`;
        } else {
          result += `${item.name} - ${item.price.toLocaleString('vi-VN')} VND\n`;
        }
      });
      result += '\n';
    }
  }
  
  return result;
}

const questions = [
  {
    question: "Con g√¨ c√≥ 4 ch√¢n nh∆∞ng kh√¥ng ch·∫°y?",
    options: ["B√†n", "Gh·∫ø", "C·ª≠a"],
    correct: 0
  },
  {
    question: "C√°i g√¨ m√† ƒëi th√¨ n·∫±m, ƒë·ª©ng th√¨ bay?",
    options: ["ƒê·ªìng h·ªì", "M√°y bay", "C·∫ßu thang"],
    correct: 0
  },
  {
    question: "Lo·∫°i qu·∫£ n√†o c√≥ nhi·ªÅu vitamin C nh·∫•t?",
    options: ["Cam", "T√°o", "Chu·ªëi"],
    correct: 0
  },
  {
    question: "Con v·∫≠t n√†o c√≥ c·ªï d√†i nh·∫•t?",
    options: ["H∆∞∆°u cao c·ªï", "Ng·ª±a", "Voi"],
    correct: 0
  },
  {
    question: "C√°i g√¨ c√≥ m·∫Øt nh∆∞ng kh√¥ng nh√¨n th·∫•y?",
    options: ["Kim m≈©i kh√¢u", "C√¢y kim", "B√∫t ch√¨"],
    correct: 0
  }
];

const numberEmojis = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£'];

// Casino functions
function getCardValue(card) {
  if (card === 'A') return 11;
  if (['J', 'Q', 'K'].includes(card)) return 10;
  return parseInt(card);
}

function getHandValue(hand) {
  let value = 0;
  let aces = 0;
  for (let card of hand) {
    if (card === 'A') {
      aces++;
      value += 11;
    } else if (['J', 'Q', 'K'].includes(card)) {
      value += 10;
    } else {
      value += parseInt(card);
    }
  }
  while (value > 21 && aces > 0) {
    value -= 10;
    aces--;
  }
  return value;
}

function createDeck() {
  const suits = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£'];
  const values = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];
  const deck = [];
  for (let suit of suits) {
    for (let value of values) {
      deck.push(value + suit);
    }
  }
  return deck;
}

function shuffleDeck(deck) {
  for (let i = deck.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [deck[i], deck[j]] = [deck[j], deck[i]];
  }
  return deck;
}

function drawCard(deck, isDealer = false, isDealerFirstDraw = false, dealerFirstCard = null) {
  if (isDealer) {
    if (isDealerFirstDraw) {
      // 30% c∆° h·ªôi nh√† c√°i ƒë∆∞·ª£c A trong l√° ƒë·∫ßu ti√™n
      if (Math.random() < 0.3) {
        const aceCard = deck.find(card => card[0] === 'A');
        if (aceCard) {
          const index = deck.indexOf(aceCard);
          deck.splice(index, 1);
          return aceCard;
        }
      }
    } else if (dealerFirstCard && dealerFirstCard[0] === 'A') {
      // N·∫øu l√° ƒë·∫ßu l√† A, 40% c∆° h·ªôi l√° th·ª© 2 l√† 10, J, Q, K
      if (Math.random() < 0.4) {
        const tenCard = deck.find(card => ['10', 'J', 'Q', 'K'].includes(card[0]));
        if (tenCard) {
          const index = deck.indexOf(tenCard);
          deck.splice(index, 1);
          return tenCard;
        }
      }
    } else if (dealerFirstCard && ['10', 'J', 'Q', 'K'].includes(dealerFirstCard[0])) {
      // N·∫øu l√° ƒë·∫ßu l√† 10/J/Q/K, 40% c∆° h·ªôi l√° th·ª© 2 l√† A
      if (Math.random() < 0.4) {
        const aceCard = deck.find(card => card[0] === 'A');
        if (aceCard) {
          const index = deck.indexOf(aceCard);
          deck.splice(index, 1);
          return aceCard;
        }
      }
    } else if (Math.random() < 0.6) { // 60% c∆° h·ªôi nh√† c√°i ƒë∆∞·ª£c b√†i t·ªët cho c√°c l·∫ßn r√∫t kh√°c
      const lastFiveCards = deck.slice(-5);
      const highCard = lastFiveCards.find(card => ['J', 'Q', 'K', 'A'].includes(card[0]));
      if (highCard) {
        const index = deck.indexOf(highCard);
        deck.splice(index, 1);
        return highCard;
      }
    }
  }
  return deck.pop();
}

function getCardDisplay(card) {
  return `\`${card}\``;
}

const jobs = [
  { name: 'Designer', payPerHour: 50000, isCommission: false },
  { name: 'Coder', payPerHour: 80000, isCommission: false },
  { name: 'Shipper', payPerHour: 30000, isCommission: true },
  { name: 'Teacher', payPerHour: 60000, isCommission: false },
  { name: 'Doctor', payPerHour: 100000, isCommission: false },
  { name: 'Chef', payPerHour: 40000, isCommission: false },
  { name: 'Driver', payPerHour: 35000, isCommission: true },
  { name: 'Writer', payPerHour: 45000, isCommission: false },
];

client.once('clientReady', () => {
  console.log('Bot ƒë√£ s·∫µn s√†ng!');
});

client.on('voiceStateUpdate', (oldState, newState) => {
  const userId = newState.id;
  const user = userData[userId] || { lastCheckin: null, streak: 0, totalCheckins: 0, money: 0, xp: 0, voiceJoinTime: null, lastLevel: 1, inventory: [], isSearchingJob: false };

  if (!oldState.channel && newState.channel) {
    // Joined voice
    user.voiceJoinTime = Date.now();
  } else if (oldState.channel && !newState.channel) {
    // Left voice
    if (user.voiceJoinTime) {
      const timeInVoice = Date.now() - user.voiceJoinTime;
      const xpGain = Math.floor(timeInVoice / 60000) * 20; // 20 XP per minute in voice
      user.xp += xpGain;
      user.voiceJoinTime = null;
      // Optional: notify user
    }
  }

  userData[userId] = user;
  saveData();
});

// Ensure only one messageCreate listener
if (client.listenerCount('messageCreate') === 0) {
  client.on('messageCreate', async (message) => {
    if (message.author.bot) return;

  // XP for chat (light, with cooldown)
  const now = Date.now();
  const lastTime = lastMessageTime.get(message.author.id) || 0;
  if (now - lastTime > 60000) { // 1 minute cooldown
    const user = userData[message.author.id] || { lastCheckin: null, streak: 0, totalCheckins: 0, money: 0, xp: 0, lastLevel: 1, inventory: [], isSearchingJob: false };
    user.xp += 10; // 10 XP per message with cooldown
    checkLevelUp(user, message);
    userData[message.author.id] = user;
    saveData();
    lastMessageTime.set(message.author.id, now);
  }

  if (message.content === '!ping') {
    message.reply('Pong!');
  }

  if (message.content === '!help') {
    const helpEmbed = new EmbedBuilder()
      .setTitle('üìö H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG BOT')
      .setColor('#0099FF')
      .setDescription('Danh s√°ch c√°c l·ªánh c√≥ s·∫µn:')
      .addFields(
        { 
          name: 'üí∞ L·ªÜNH C∆† B·∫¢N', 
          value: '`!ping` - Ki·ªÉm tra bot\n`!help` - Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n\n`!checkin` - ƒêi·ªÉm danh h√†ng ng√†y\n`!profile` - Xem profile c·ªßa b·∫°n\n`!inventory` - Xem t√∫i ƒë·ªì\n`!sell <s·ªë>` - B√°n item (VD: !sell 1)\n`!resetdata` - Reset data c·ªßa b·∫°n',
          inline: false 
        },
        { 
          name: 'üíº L·ªÜNH NGH·ªÄ NGHI·ªÜP', 
          value: '`!timviec` - T√¨m vi·ªác l√†m (ch·ªçn ngh·ªÅ qua reaction)\n`!work` - L√†m vi·ªác ƒë·ªÉ ki·∫øm ti·ªÅn (1 l·∫ßn/ng√†y)',
          inline: false 
        },
        { 
          name: 'üé∞ L·ªÜNH CASINO', 
          value: '`!bacay <ti·ªÅn>` - Ba c√¢y (T·ª∑ l·ªá 1:1)\n`!xidach <ti·ªÅn>` - X√¨ d√°ch/Blackjack (T·ª∑ l·ªá 1:1.5)\n`!ngua <ti·ªÅn>` - Tung xu m·∫∑t ng·ª≠a (T·ª∑ l·ªá 1:1)\n`!sap <ti·ªÅn>` - Tung xu m·∫∑t s·∫•p (T·ª∑ l·ªá 1:1)\n`!slot <ti·ªÅn>` - Quay slot (T·ª∑ l·ªá l√™n ƒë·∫øn 1:20)\n\nüí° **M·∫πo:** D√πng `all` thay v√¨ s·ªë ti·ªÅn ƒë·ªÉ c∆∞·ª£c to√†n b·ªô!\nV√≠ d·ª•: `!bacay all`, `!slot all`',
          inline: false 
        },
        {
          name: 'üè¶ NG√ÇN H√ÄNG',
          value: '`!bank` - Xem th√¥ng tin t√†i kho·∫£n ng√¢n h√†ng\n`!deposit <s·ªë ti·ªÅn>` - N·∫°p ti·ªÅn v√†o t√†i kho·∫£n\n`!withdraw <s·ªë ti·ªÅn>` - R√∫t ti·ªÅn t·ª´ t√†i kho·∫£n\n`!transfer <@user> <s·ªë ti·ªÅn> [ghi ch√∫]` - Chuy·ªÉn ti·ªÅn cho ng∆∞·ªùi kh√°c\n`!history` - Xem l·ªãch s·ª≠ giao d·ªãch',
          inline: false
        },
        {
          name: 'üõçÔ∏è C·ª¨A H√ÄNG',
          value: '`!shop` - Xem danh s√°ch c·ª≠a h√†ng\n`!shop fashion` - C·ª≠a h√†ng th·ªùi trang\n`!shop pets` - C·ª≠a h√†ng th√∫ c∆∞ng\n`!shop vehicles` - C·ª≠a h√†ng ph∆∞∆°ng ti·ªán\n`!buy <ID>` - Mua v·∫≠t ph·∫©m (VD: !buy F1)',
          inline: false
        },
        {
          name: 'üìä X·∫æP H·∫†NG',
          value: '`!toprich` - Top 10 ng∆∞·ªùi gi√†u nh·∫•t\n`!toplevel` - Top 10 level cao nh·∫•t',
          inline: false
        },
        { 
          name: 'üìã TH√îNG TIN TH√äM', 
          value: '‚Ä¢ ƒêi·ªÉm danh li√™n t·ª•c ƒë·ªÉ tƒÉng streak v√† nh·∫≠n th∆∞·ªüng l·ªõn!\n‚Ä¢ Level tƒÉng qua XP t·ª´ chat, voice, check-in\n‚Ä¢ M·ªói 5 level nh·∫≠n h·ªôp qu√† 3 item\n‚Ä¢ Casino: Jackpot 7Ô∏è‚É£ trong slot = x20 ti·ªÅn c∆∞·ª£c!\n‚Ä¢ D√πng `!transfer <@user> all` ƒë·ªÉ chuy·ªÉn to√†n b·ªô s·ªë d∆∞\n‚Ä¢ Voice chat nh·∫≠n 20 XP/ph√∫t',
          inline: false 
        }
      )
      .setFooter({ text: 'üéÆ MAN88 Bot - Ch√∫c b·∫°n ch∆°i vui v·∫ª!' })
      .setTimestamp();

    message.reply({ embeds: [helpEmbed] });
  }

  if (message.content === '!checkin') {
    const commandNow = Date.now();
    const cooldownTime = 2000; // 2 seconds
    if (commandCooldown.has(message.author.id)) {
      const lastUsed = commandCooldown.get(message.author.id);
      if (commandNow - lastUsed < cooldownTime) {
        return message.reply('Vui l√≤ng ch·ªù m·ªôt ch√∫t tr∆∞·ªõc khi d√πng l·ªánh n√†y l·∫°i.');
      }
    }
    commandCooldown.set(message.author.id, commandNow);

    const userId = message.author.id;
    const guild = message.guild;
    const member = guild.members.cache.get(userId);

    if (!member) {
      return message.reply('Kh√¥ng t√¨m th·∫•y th√†nh vi√™n!');
    }

    // B·ªè check online status, cho ph√©p t·∫•t c·∫£ tr·∫°ng th√°i

    const now = new Date();
    const today = now.toDateString();
    const user = userData[userId] || { lastCheckin: null, streak: 0, totalCheckins: 0, money: 0, xp: 0, lastLevel: 1, inventory: [], isSearchingJob: false };

    let rewardMoney = 5000; // Base daily reward
    let rewardXp = 20; // Base XP for checkin

    if (user.lastCheckin) {
      const lastDate = new Date(user.lastCheckin);
      const diffDays = Math.floor((now - lastDate) / (1000 * 60 * 60 * 24));

      if (diffDays === 1) {
        user.streak += 1;
      } else if (diffDays > 1) {
        user.streak = 1; // Reset streak
      }
      // If same day, no reward
      if (diffDays === 0) {
        return message.reply('B·∫°n ƒë√£ ƒëi·ªÉm danh h√¥m nay r·ªìi!');
      }
    } else {
      user.streak = 1;
    }

    // Bonus for streak
    rewardMoney += user.streak * 2000;
    rewardXp += user.streak;

    // Weekly bonus
    if (user.streak % 7 === 0) {
      rewardMoney += 100000;
      rewardXp += 100;
      message.reply(`**Ph·∫ßn th∆∞·ªüng tu·∫ßn!** Streak ${user.streak} ng√†y!`);
    }

    // Monthly bonus
    if (user.streak % 30 === 0) {
      rewardMoney += 1000000;
      rewardXp += 400;
      message.reply(`**Ph·∫ßn th∆∞·ªüng th√°ng!** Streak ${user.streak} ng√†y!`);
    }

    user.lastCheckin = today;
    user.totalCheckins += 1;
    user.money += rewardMoney;
    user.xp += rewardXp;

    checkLevelUp(user, message);

    userData[userId] = user;
    saveData();

    const embed = new EmbedBuilder()
      .setColor('#00FF00')
      .setTitle('ƒêi·ªÉm danh th√†nh c√¥ng! üéâ')
      .setDescription(`Ch√∫c m·ª´ng ${message.author.username}!`)
      .addFields(
        { name: 'üî• Streak', value: `${user.streak} ng√†y`, inline: true },
        { name: 'üí∞ Ph·∫ßn th∆∞·ªüng ti·ªÅn', value: `${rewardMoney.toLocaleString('vi-VN')} VND`, inline: true },
        { name: 'üìà Ph·∫ßn th∆∞·ªüng XP', value: `${rewardXp}`, inline: true },
        { name: 'üíµ T·ªïng ti·ªÅn', value: `${user.money.toLocaleString('vi-VN')} VND`, inline: true },
        { name: 'üìä T·ªïng XP', value: `${user.xp}`, inline: true },
        { name: 'üìÖ T·ªïng check-in', value: `${user.totalCheckins}`, inline: true }
      )
      .setFooter({ text: 'H√£y ti·∫øp t·ª•c streak ƒë·ªÉ nh·∫≠n th∆∞·ªüng l·ªõn!' });

    message.reply({ embeds: [embed] });
  }

  if (message.content === '!profile') {
    const commandNow = Date.now();
    const cooldownTime = 5000; // 5 seconds
    if (commandCooldown.has(message.author.id)) {
      const lastUsed = commandCooldown.get(message.author.id);
      if (commandNow - lastUsed < cooldownTime) {
        return message.reply('Vui l√≤ng ch·ªù m·ªôt ch√∫t tr∆∞·ªõc khi d√πng l·ªánh n√†y l·∫°i.');
      }
    }
    commandCooldown.set(message.author.id, commandNow);

    console.log('Profile command used by', message.author.username);
    const userId = message.author.id;
    const user = userData[userId] || { lastCheckin: null, streak: 0, totalCheckins: 0, money: 0, xp: 0, lastLevel: 1, inventory: [], isSearchingJob: false };

    const { level, nextXp } = getLevelInfo(user.xp);

    const embed = new EmbedBuilder()
      .setColor('#0099FF')
      .setTitle(`Profile c·ªßa ${message.author.username}`)
      .setThumbnail(message.author.displayAvatarURL())
      .addFields(
        { name: 'üíµ Ti·ªÅn', value: `${user.money.toLocaleString('vi-VN')} VND`, inline: true },
        { name: 'üìä XP', value: `${user.xp}`, inline: true },
        { name: 'üèÜ Level', value: `${level}`, inline: true },
        { name: 'üî• Streak', value: `${user.streak} ng√†y`, inline: true },
        { name: 'üìÖ T·ªïng check-in', value: `${user.totalCheckins}`, inline: true },
        { name: '‚¨ÜÔ∏è XP c·∫ßn cho level ti·∫øp', value: `${nextXp}`, inline: true },
        { name: 'üíº Ngh·ªÅ nghi·ªáp', value: user.selectedJob || 'Ch∆∞a ch·ªçn ngh·ªÅ', inline: true }
      )
      .setFooter({ text: 'Ti·∫øp t·ª•c check-in ƒë·ªÉ tƒÉng level v√† ti·ªÅn!' });

    message.reply({ embeds: [embed] });
  }

  if (message.content === '!inventory') {
    const commandNow = Date.now();
    const cooldownTime = 2000; // 2 seconds
    if (commandCooldown.has(message.author.id)) {
      const lastUsed = commandCooldown.get(message.author.id);
      if (commandNow - lastUsed < cooldownTime) {
        return message.reply('Vui l√≤ng ch·ªù m·ªôt ch√∫t tr∆∞·ªõc khi d√πng l·ªánh n√†y l·∫°i.');
      }
    }
    commandCooldown.set(message.author.id, commandNow);

    const user = userData[message.author.id] || { inventory: [], isSearchingJob: false };
    if (!user.inventory || user.inventory.length === 0) {
      message.reply('T√∫i ƒë·ªì tr·ªëng!');
      return;
    }
    let desc = '';
    user.inventory.forEach((item, index) => {
      desc += `${index + 1}. ${item.name} - B√°n: ${item.sellPrice.toLocaleString('vi-VN')} VND\n`;
    });
    const embed = new EmbedBuilder()
      .setTitle(`T√∫i ƒë·ªì c·ªßa ${message.author.username}`)
      .setDescription(desc)
      .setColor('#FFA500');
    message.reply({ embeds: [embed] });
  }

  if (message.content.startsWith('!sell ')) {
    const commandNow = Date.now();
    const cooldownTime = 2000; // 2 seconds
    if (commandCooldown.has(message.author.id)) {
      const lastUsed = commandCooldown.get(message.author.id);
      if (commandNow - lastUsed < cooldownTime) {
        return message.reply('Vui l√≤ng ch·ªù m·ªôt ch√∫t tr∆∞·ªõc khi d√πng l·ªánh n√†y l·∫°i.');
      }
    }
    commandCooldown.set(message.author.id, commandNow);

    const args = message.content.split(' ');
    const index = parseInt(args[1]) - 1;
    const user = userData[message.author.id] || { inventory: [], money: 0, isSearchingJob: false };
    if (!user.inventory || index < 0 || index >= user.inventory.length) {
      message.reply('Item kh√¥ng t·ªìn t·∫°i!');
      return;
    }
    const item = user.inventory.splice(index, 1)[0];
    user.money += item.sellPrice;
    userData[message.author.id] = user;
    saveData();
    message.reply(`ƒê√£ b√°n ${item.name} cho ${item.sellPrice.toLocaleString('vi-VN')} VND. T·ªïng ti·ªÅn: ${user.money.toLocaleString('vi-VN')} VND.`);
  }

  if (message.content.startsWith('!resetdata')) {
    const now = Date.now();
    const cooldownTime = 30000; // 30 seconds
    if (commandCooldown.has(message.author.id)) {
      const lastUsed = commandCooldown.get(message.author.id);
      if (now - lastUsed < cooldownTime) {
        return message.reply('Vui l√≤ng ch·ªù m·ªôt ch√∫t tr∆∞·ªõc khi d√πng l·ªánh n√†y l·∫°i.');
      }
    }
    commandCooldown.set(message.author.id, now);

    // if (message.author.id !== ownerId) {
    //   return message.reply('Ch·ªâ owner m·ªõi c√≥ th·ªÉ d√πng l·ªánh n√†y!');
    // }

    const args = message.content.split(' ');
    const targetUserId = args[1] || message.author.id; // N·∫øu kh√¥ng ch·ªâ ƒë·ªãnh, reset ch√≠nh m√¨nh

    if (message.author.id !== ownerId && targetUserId !== message.author.id) {
      return message.reply('B·∫°n ch·ªâ c√≥ th·ªÉ reset data c·ªßa ch√≠nh m√¨nh!');
    }

    if (userData[targetUserId]) {
      delete userData[targetUserId];
      saveData();
      // Reset only certain maps, keep cooldown to prevent spam
      profileProcessing.delete(targetUserId);
      lastMessageTime.delete(targetUserId);
      return message.reply(`ƒê√£ reset data c·ªßa user ${targetUserId}.`);
    } else {
      return message.reply('User ch∆∞a c√≥ data.');
    }
  }

  if (message.content === '!timviec') {
    const commandNow = Date.now();
    const cooldownTime = 2000; // 2 seconds
    if (commandCooldown.has(message.author.id)) {
      const lastUsed = commandCooldown.get(message.author.id);
      if (commandNow - lastUsed < cooldownTime) {
        return message.reply('Vui l√≤ng ch·ªù m·ªôt ch√∫t tr∆∞·ªõc khi d√πng l·ªánh n√†y l·∫°i.');
      }
    }
    commandCooldown.set(message.author.id, commandNow);

  const userId = message.author.id;

  const user = userData[userId] || {
    lastCheckin: null, streak: 0, totalCheckins: 0,
    money: 0, xp: 0, lastLevel: 1, inventory: [],
    lastWork: null, selectedJob: null, attemptsToday: 0, isSearchingJob: false
  };

  if (user.isSearchingJob) {
    return message.reply('B·∫°n ƒëang trong qu√° tr√¨nh th·ª≠ vi·ªác, vui l√≤ng ho√†n th√†nh tr∆∞·ªõc khi t√¨m vi·ªác m·ªõi.');
  }

  try {

    const now = new Date();
    const today = now.toDateString();

    if (user.lastWork !== today) {
      user.attemptsToday = 0;
      user.selectedJob = null;
      user.lastWork = today;
    }

    if (user.selectedJob)
      return message.reply('‚úÖ B·∫°n ƒë√£ c√≥ ngh·ªÅ r·ªìi! D√πng !work ƒë·ªÉ l√†m vi·ªác.');
    if (user.attemptsToday >= 3)
      return message.reply('üö´ B·∫°n ƒë√£ th·ª≠ vi·ªác 3 l·∫ßn h√¥m nay, h√£y quay l·∫°i v√†o ng√†y mai.');

    // T·∫°o embed danh s√°ch ngh·ªÅ
    let desc = 'Ch·ªçn ngh·ªÅ c·ªßa b·∫°n b·∫±ng c√°ch react emoji:\n\n';
    jobs.forEach((job, index) => {
      desc += `${numberEmojis[index]} **${job.name}** ‚Äî üí∞ ${job.payPerHour.toLocaleString('vi-VN')} VND/gi·ªù\n`;
    });

    const embed = new EmbedBuilder()
      .setTitle('üè¢ TRUNG T√ÇM GI·ªöI THI·ªÜU VI·ªÜC L√ÄM')
      .setDescription(desc)
      .setColor('#FFA500');

    const jobMsg = await message.reply({ embeds: [embed] });
    for (let i = 0; i < jobs.length; i++) {
      await jobMsg.react(numberEmojis[i]);
    }

    user.isSearchingJob = true;
    userData[userId] = user;
    saveData();

    // Collector kh√¥ng gi·ªõi h·∫°n th·ªùi gian
    const filter = (reaction, userReact) =>
      numberEmojis.includes(reaction.emoji.name) && userReact.id === userId;

    const collector = jobMsg.createReactionCollector({ filter, max: 1, time: 60000 }); // 1 minute timeout

    collector.on('collect', async (reaction) => {
      try {
        const choice = numberEmojis.indexOf(reaction.emoji.name);
        const job = jobs[choice];

        await jobMsg.reactions.removeAll().catch(() => {});

        // C√¢u h·ªèi th·ª≠ vi·ªác
        const question = questions[Math.floor(Math.random() * questions.length)];
        let qDesc = `${question.question}\n\n`;
        question.options.forEach((opt, idx) => {
          qDesc += `${numberEmojis[idx]} ${opt}\n`;
        });

        const qEmbed = new EmbedBuilder()
          .setTitle('üß† TH·ª¨ VI·ªÜC')
          .setDescription(qDesc)
          .setColor('#FFA500');

        const qMsg = await message.reply({ embeds: [qEmbed] });
        for (let i = 0; i < question.options.length; i++) {
          await qMsg.react(numberEmojis[i]);
        }

        const qFilter = (reaction, userReact) =>
          numberEmojis.slice(0, question.options.length).includes(reaction.emoji.name) &&
          userReact.id === userId;

        const qCollector = qMsg.createReactionCollector({ filter: qFilter, max: 1 });

        qCollector.on('collect', async (ansReaction) => {
          const answer = numberEmojis.indexOf(ansReaction.emoji.name);

          await qMsg.reactions.removeAll().catch(() => {});

          if (answer !== question.correct) {
            user.attemptsToday += 1;
            user.isSearchingJob = false;
            userData[userId] = user;
            saveData();
            return message.reply(`‚ùå Tr·∫£ l·ªùi sai! B·∫°n c√≤n ${3 - user.attemptsToday} l·∫ßn th·ª≠ h√¥m nay.`);
          }

          // Tr·∫£ l·ªùi ƒë√∫ng
          user.selectedJob = job.name;
          user.attemptsToday = 0;
          user.lastWork = null; // Reset ƒë·ªÉ cho ph√©p work ngay sau khi t√¨m vi·ªác th√†nh c√¥ng
          user.isSearchingJob = false;
          userData[userId] = user;
          saveData();

          return message.reply(`üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ ƒë∆∞·ª£c nh·∫≠n l√†m **${job.name}**!\nD√πng l·ªánh **!work** ƒë·ªÉ b·∫Øt ƒë·∫ßu l√†m vi·ªác.`);
        });

      } catch (err) {
        console.error(err);
        message.reply('‚ö†Ô∏è L·ªói khi x·ª≠ l√Ω qu√° tr√¨nh ch·ªçn ngh·ªÅ.');
        user.isSearchingJob = false;
        userData[userId] = user;
        saveData();
      }
    });

    collector.on('end', () => {
      user.isSearchingJob = false;
      userData[userId] = user;
      saveData();
    });

  } catch (err) {
    console.error(err);
    message.reply('‚ö†Ô∏è C√≥ l·ªói x·∫£y ra.');
    user.isSearchingJob = false;
    userData[userId] = user;
    saveData();
  }
}

  if (message.content === '!work') {
    const commandNow = Date.now();
    const cooldownTime = 2000; // 2 seconds
    if (commandCooldown.has(message.author.id)) {
      const lastUsed = commandCooldown.get(message.author.id);
      if (commandNow - lastUsed < cooldownTime) {
        return message.reply('Vui l√≤ng ch·ªù m·ªôt ch√∫t tr∆∞·ªõc khi d√πng l·ªánh n√†y l·∫°i.');
      }
    }
    commandCooldown.set(message.author.id, commandNow);

    const userId = message.author.id;
    const user = userData[userId] || { 
      lastCheckin: null, 
      streak: 0, 
      totalCheckins: 0, 
      money: 0, 
      xp: 0, 
      lastLevel: 1, 
      inventory: [], 
      lastWork: null,
      lastOvertimeWork: null, 
      selectedJob: null, 
      attemptsToday: 0, 
      isSearchingJob: false,
      overtimeCount: 0 // S·ªë l·∫ßn ƒë√£ l√†m ngo√†i gi·ªù trong ng√†y
    };

    const now = new Date();
    const today = now.toDateString();

    if (!user.selectedJob) {
      return message.reply('B·∫°n ch∆∞a ch·ªçn ngh·ªÅ! D√πng !timviec ƒë·ªÉ t√¨m vi·ªác tr∆∞·ªõc.');
    }

    const job = jobs.find(j => j.name === user.selectedJob);
    if (!job) {
      return message.reply('L·ªói: Ngh·ªÅ kh√¥ng t·ªìn t·∫°i.');
    }

    // Ki·ªÉm tra v√† th·ª±c hi·ªán c√¥ng vi·ªác ch√≠nh
    if (!user.lastWork || user.lastWork !== today) {
      // Ti·∫øn h√†nh l√†m vi·ªác ch√≠nh
      const hours = 8;
      const basePay = hours * job.payPerHour;
      let bonus;
      if (job.isCommission) {
        bonus = Math.floor(Math.random() * 150000) + 10000;
      } else {
        bonus = Math.floor(Math.random() * 100000) + 50000;
      }
      const totalPay = basePay + bonus;

      user.money += totalPay;
      user.lastWork = today;
      user.overtimeCount = 0; // Reset s·ªë l·∫ßn l√†m ngo√†i gi·ªù m·ªói ng√†y m·ªõi
      userData[userId] = user;
      saveData();

      const workEmbed = new EmbedBuilder()
        .setTitle('üè¢ L√ÄM VI·ªÜC CH√çNH')
        .setColor('#00FF00')
        .addFields(
          { name: 'üíº C√¥ng vi·ªác', value: `${job.name}`, inline: true },
          { name: '‚è∞ S·ªë gi·ªù', value: `${hours} gi·ªù`, inline: true },
          { name: 'üí∞ L∆∞∆°ng c∆° b·∫£n', value: `${basePay.toLocaleString('vi-VN')} VND`, inline: true },
          { name: 'üéÅ Th∆∞·ªüng', value: `${bonus.toLocaleString('vi-VN')} VND`, inline: true },
          { name: 'üíµ T·ªïng nh·∫≠n', value: `${totalPay.toLocaleString('vi-VN')} VND`, inline: true },
          { name: 'üè¶ S·ªë d∆∞', value: `${user.money.toLocaleString('vi-VN')} VND`, inline: true }
        )
        .setFooter({ text: 'üí° B·∫°n c√≥ th·ªÉ l√†m th√™m gi·ªù! S·ª≠ d·ª•ng !work m·ªôt l·∫ßn n·ªØa.' });

      return message.reply({ embeds: [workEmbed] });
    }
    
    // X·ª≠ l√Ω l√†m ngo√†i gi·ªù (ch·ªâ hi·ªÉn th·ªã sau khi ƒë√£ l√†m vi·ªác ch√≠nh)
    const maxOvertimePerDay = 3; // T·ªëi ƒëa 3 l·∫ßn l√†m ngo√†i gi·ªù m·ªôt ng√†y
    if (user.overtimeCount >= maxOvertimePerDay) {
      return message.reply('‚ùå B·∫°n ƒë√£ l√†m ƒë·ªß s·ªë gi·ªù ngo√†i gi·ªù cho ph√©p h√¥m nay (t·ªëi ƒëa 3 l·∫ßn).');
    }

    // T√≠nh l∆∞∆°ng l√†m ngo√†i gi·ªù (50% l∆∞∆°ng c∆° b·∫£n)
    const overtimeHours = 4; // L√†m th√™m 4 gi·ªù m·ªói l·∫ßn
    const overtimePay = Math.floor((overtimeHours * job.payPerHour * 0.5));
    let overtimeBonus = 0;
    if (job.isCommission) {
      overtimeBonus = Math.floor(Math.random() * 50000) + 5000; // Th∆∞·ªüng ngo√†i gi·ªù th·∫•p h∆°n
    } else {
      overtimeBonus = Math.floor(Math.random() * 30000) + 10000;
    }
    const totalOvertimePay = overtimePay + overtimeBonus;

    user.money += totalOvertimePay;
    user.overtimeCount = (user.overtimeCount || 0) + 1;
    userData[userId] = user;
    saveData();

    const overtimeEmbed = new EmbedBuilder()
      .setTitle('üåô L√ÄM TH√äM GI·ªú')
      .setColor('#FFA500')
      .addFields(
        { name: 'üíº C√¥ng vi·ªác', value: `${job.name}`, inline: true },
        { name: '‚è∞ S·ªë gi·ªù', value: `${overtimeHours} gi·ªù`, inline: true },
        { name: 'üí∞ L∆∞∆°ng ngo√†i gi·ªù', value: `${overtimePay.toLocaleString('vi-VN')} VND`, inline: true },
        { name: 'üéÅ Th∆∞·ªüng', value: `${overtimeBonus.toLocaleString('vi-VN')} VND`, inline: true },
        { name: 'üíµ T·ªïng nh·∫≠n', value: `${totalOvertimePay.toLocaleString('vi-VN')} VND`, inline: true },
        { name: 'üè¶ S·ªë d∆∞', value: `${user.money.toLocaleString('vi-VN')} VND`, inline: true },
        { name: 'üìä S·ªë l·∫ßn c√≤n l·∫°i', value: `${maxOvertimePerDay - user.overtimeCount} l·∫ßn`, inline: true }
      );

    message.reply({ embeds: [overtimeEmbed] });
  }

  // BA C√ÇY
  if (message.content.startsWith('!bacay')) {
    const commandNow = Date.now();
    const cooldownTime = 3000;
    if (commandCooldown.has(message.author.id)) {
      const lastUsed = commandCooldown.get(message.author.id);
      if (commandNow - lastUsed < cooldownTime) {
        return message.reply('Vui l√≤ng ch·ªù m·ªôt ch√∫t tr∆∞·ªõc khi d√πng l·ªánh n√†y l·∫°i.');
      }
    }
    commandCooldown.set(message.author.id, commandNow);

    const userId = message.author.id;
    const user = userData[userId] || { money: 0, isSearchingJob: false };

    const args = message.content.split(' ');
    let betAmount;

    if (args[1] === 'all') {
      betAmount = user.money;
    } else {
      betAmount = parseInt(args[1]);
    }

    if (!betAmount || betAmount <= 0) {
      return message.reply('C√∫ ph√°p: `!bacay <s·ªë ti·ªÅn>` ho·∫∑c `!bacay all`\nV√≠ d·ª•: `!bacay 10000`');
    }

    if (user.money < betAmount) {
      return message.reply(`B·∫°n kh√¥ng ƒë·ªß ti·ªÅn! B·∫°n ch·ªâ c√≥ ${user.money.toLocaleString('vi-VN')} VND.`);
    }

    const deck = shuffleDeck(createDeck());
    const playerCards = [drawCard(deck), drawCard(deck), drawCard(deck)];
    const dealerCards = [drawCard(deck, true), drawCard(deck, true), drawCard(deck, true)];

    const playerValue = (getCardValue(playerCards[0].slice(0, -1)) + 
                       getCardValue(playerCards[1].slice(0, -1)) + 
                       getCardValue(playerCards[2].slice(0, -1))) % 10;
    const dealerValue = (getCardValue(dealerCards[0].slice(0, -1)) + 
                       getCardValue(dealerCards[1].slice(0, -1)) + 
                       getCardValue(dealerCards[2].slice(0, -1))) % 10;

    const resultEmbed = new EmbedBuilder()
      .setTitle('üé¥ BA C√ÇY')
      .addFields(
        { name: 'üí∞ C∆∞·ª£c', value: `${betAmount.toLocaleString('vi-VN')} VND`, inline: false },
        { name: 'üé≤ B√†i c·ªßa b·∫°n', value: `${playerCards.map(getCardDisplay).join(' ')} = **${playerValue} ƒëi·ªÉm**`, inline: false },
        { name: 'üé≤ B√†i c·ªßa nh√† c√°i', value: `${dealerCards.map(getCardDisplay).join(' ')} = **${dealerValue} ƒëi·ªÉm**`, inline: false }
      )
      .setColor(playerValue > dealerValue ? '#00FF00' : playerValue < dealerValue ? '#FF0000' : '#FFFF00');

    if (playerValue > dealerValue) {
      user.money += betAmount;
      resultEmbed.setDescription(`üéâ **TH·∫ÆNG!** +${betAmount.toLocaleString('vi-VN')} VND\nüí∞ T·ªïng ti·ªÅn: ${user.money.toLocaleString('vi-VN')} VND`);
    } else if (playerValue < dealerValue) {
      user.money -= betAmount;
      resultEmbed.setDescription(`üò¢ **THUA!** -${betAmount.toLocaleString('vi-VN')} VND\nüí∞ T·ªïng ti·ªÅn: ${user.money.toLocaleString('vi-VN')} VND`);
    } else {
      resultEmbed.setDescription(`ü§ù **H√íA!** Ho√†n ti·ªÅn\nüí∞ T·ªïng ti·ªÅn: ${user.money.toLocaleString('vi-VN')} VND`);
    }

    userData[userId] = user;
    saveData();
    message.reply({ embeds: [resultEmbed] });
  }

  // X√å D√ÅCH
  if (message.content.startsWith('!xidach') || message.content.startsWith('!blackjack')) {
    const commandNow = Date.now();
    const cooldownTime = 3000;
    if (commandCooldown.has(message.author.id)) {
      const lastUsed = commandCooldown.get(message.author.id);
      if (commandNow - lastUsed < cooldownTime) {
        return message.reply('Vui l√≤ng ch·ªù m·ªôt ch√∫t tr∆∞·ªõc khi d√πng l·ªánh n√†y l·∫°i.');
      }
    }
    commandCooldown.set(message.author.id, commandNow);

    const userId = message.author.id;
    const user = userData[userId] || { money: 0, isSearchingJob: false };

    const args = message.content.split(' ');
    let betAmount;

    if (args[1] === 'all') {
      betAmount = user.money;
    } else {
      betAmount = parseInt(args[1]);
    }

    if (!betAmount || betAmount <= 0) {
      return message.reply('C√∫ ph√°p: `!xidach <s·ªë ti·ªÅn>` ho·∫∑c `!xidach all`\nV√≠ d·ª•: `!xidach 10000`');
    }

    if (user.money < betAmount) {
      return message.reply(`B·∫°n kh√¥ng ƒë·ªß ti·ªÅn! B·∫°n ch·ªâ c√≥ ${user.money.toLocaleString('vi-VN')} VND.`);
    }

    const deck = shuffleDeck(createDeck());
    const playerHand = [drawCard(deck), drawCard(deck)];
    // R√∫t b√†i cho nh√† c√°i v·ªõi logic m·ªõi
    const dealerFirstCard = drawCard(deck, true, true);
    const dealerSecondCard = drawCard(deck, true, false, dealerFirstCard);
    const dealerHand = [dealerFirstCard, dealerSecondCard];

    let playerValue = getHandValue(playerHand.map(c => c.slice(0, -1)));
    let dealerValue = getHandValue(dealerHand.map(c => c.slice(0, -1)));

    const gameEmbed = new EmbedBuilder()
      .setTitle('üÉè X√å D√ÅCH (BLACKJACK)')
      .setDescription(`üí∞ C∆∞·ª£c: ${betAmount.toLocaleString('vi-VN')} VND`)
      .addFields(
        { name: 'üé≤ B√†i c·ªßa b·∫°n', value: `${playerHand.map(getCardDisplay).join(' ')} = **${playerValue}**`, inline: false },
        { name: 'üé≤ B√†i c·ªßa nh√† c√°i', value: `${getCardDisplay(dealerHand[0])} üé¥ = **?**`, inline: false },
        { name: '‚ùì', value: 'React: üëç (B·ªëc) | üëé (D·ª´ng)', inline: false }
      )
      .setColor('#0099FF');

    const bjMsg = await message.reply({ embeds: [gameEmbed] });
    await bjMsg.react('üëç');
    await bjMsg.react('üëé');

    const bjFilter = (reaction, userReact) =>
      ['üëç', 'üëé'].includes(reaction.emoji.name) && userReact.id === userId;

    let playerBusted = false;
    let dealerBusted = false;

    const bjCollector = bjMsg.createReactionCollector({ filter: bjFilter, time: 60000 });

    bjCollector.on('collect', async (bjReaction) => {
      if (bjReaction.emoji.name === 'üëç') {
        playerHand.push(drawCard(deck));
        playerValue = getHandValue(playerHand.map(c => c.slice(0, -1)));

        if (playerValue > 21) {
          playerBusted = true;
          bjCollector.stop();
        } else {
          gameEmbed.spliceFields(0, 3, 
            { name: 'üé≤ B√†i c·ªßa b·∫°n', value: `${playerHand.map(getCardDisplay).join(' ')} = **${playerValue}**`, inline: false },
            { name: 'üé≤ B√†i c·ªßa nh√† c√°i', value: `${getCardDisplay(dealerHand[0])} üé¥ = **?**`, inline: false },
            { name: '‚ùì', value: 'React: üëç (B·ªëc) | üëé (D·ª´ng)', inline: false }
          );
          await bjMsg.edit({ embeds: [gameEmbed] });
        }
      } else {
        bjCollector.stop();
      }
    });

    bjCollector.on('end', async () => {
      await bjMsg.reactions.removeAll().catch(() => {});

      while (dealerValue < 15 && !playerBusted) {
        dealerHand.push(drawCard(deck));
        dealerValue = getHandValue(dealerHand.map(c => c.slice(0, -1)));
        if (dealerValue > 21) {
          dealerBusted = true;
          break;
        }
      }

      const finalEmbed = new EmbedBuilder()
        .setTitle('üÉè X√å D√ÅCH - K·∫æT QU·∫¢')
        .addFields(
          { name: 'üí∞ C∆∞·ª£c', value: `${betAmount.toLocaleString('vi-VN')} VND`, inline: false },
          { name: 'üé≤ B√†i c·ªßa b·∫°n', value: `${playerHand.map(getCardDisplay).join(' ')} = **${playerValue}**`, inline: false },
          { name: 'üé≤ B√†i c·ªßa nh√† c√°i', value: `${dealerHand.map(getCardDisplay).join(' ')} = **${dealerValue}**`, inline: false }
        );

      if (playerBusted) {
        user.money -= betAmount;
        finalEmbed.setDescription(`üí• **QU·∫ÆC!** B·∫°n v∆∞·ª£t qu√° 21!\nüò¢ **THUA!** -${betAmount.toLocaleString('vi-VN')} VND\nüí∞ T·ªïng ti·ªÅn: ${user.money.toLocaleString('vi-VN')} VND`);
        finalEmbed.setColor('#FF0000');
      } else if (dealerBusted) {
        const winAmount = Math.floor(betAmount * 1.5);
        user.money += winAmount;
        finalEmbed.setDescription(`üí• Nh√† c√°i qu·∫Øc!\nüéâ **TH·∫ÆNG!** +${winAmount.toLocaleString('vi-VN')} VND\nüí∞ T·ªïng ti·ªÅn: ${user.money.toLocaleString('vi-VN')} VND`);
        finalEmbed.setColor('#00FF00');
      } else if (playerValue > dealerValue) {
        const winAmount = Math.floor(betAmount * 1.5);
        user.money += winAmount;
        finalEmbed.setDescription(`üéâ **TH·∫ÆNG!** +${winAmount.toLocaleString('vi-VN')} VND\nüí∞ T·ªïng ti·ªÅn: ${user.money.toLocaleString('vi-VN')} VND`);
        finalEmbed.setColor('#00FF00');
      } else if (playerValue < dealerValue) {
        user.money -= betAmount;
        finalEmbed.setDescription(`üò¢ **THUA!** -${betAmount.toLocaleString('vi-VN')} VND\nüí∞ T·ªïng ti·ªÅn: ${user.money.toLocaleString('vi-VN')} VND`);
        finalEmbed.setColor('#FF0000');
      } else {
        finalEmbed.setDescription(`ü§ù **H√íA!** Ho√†n ti·ªÅn\nüí∞ T·ªïng ti·ªÅn: ${user.money.toLocaleString('vi-VN')} VND`);
        finalEmbed.setColor('#FFFF00');
      }

      userData[userId] = user;
      saveData();
      message.reply({ embeds: [finalEmbed] });
    });
  }

  // FLIP COIN - M·∫∂T NG·ª¨A
  if (message.content.startsWith('!ngua')) {
    const commandNow = Date.now();
    const cooldownTime = 3000;
    if (commandCooldown.has(message.author.id)) {
      const lastUsed = commandCooldown.get(message.author.id);
      if (commandNow - lastUsed < cooldownTime) {
        return message.reply('Vui l√≤ng ch·ªù m·ªôt ch√∫t tr∆∞·ªõc khi d√πng l·ªánh n√†y l·∫°i.');
      }
    }
    commandCooldown.set(message.author.id, commandNow);

    const userId = message.author.id;
    const user = userData[userId] || { money: 0, isSearchingJob: false };

    const args = message.content.split(' ');
    let betAmount;

    if (args[1] === 'all') {
      betAmount = user.money;
    } else {
      betAmount = parseInt(args[1]);
    }

    if (!betAmount || betAmount <= 0) {
      return message.reply('C√∫ ph√°p: `!ngua <s·ªë ti·ªÅn>` ho·∫∑c `!ngua all`\nV√≠ d·ª•: `!ngua 10000`');
    }

    if (user.money < betAmount) {
      return message.reply(`B·∫°n kh√¥ng ƒë·ªß ti·ªÅn! B·∫°n ch·ªâ c√≥ ${user.money.toLocaleString('vi-VN')} VND.`);
    }

    const result = Math.random() < 0.40 ? 'üëë' : 'ü¶Ö';  // Gi·∫£m t·ª∑ l·ªá th·∫Øng xu·ªëng 40%
    const playerChoice = 'üëë';

    const resultEmbed = new EmbedBuilder()
      .setTitle('ü™ô TUNG XU - M·∫∂T NG·ª¨A')
      .addFields(
        { name: 'üí∞ C∆∞·ª£c', value: `${betAmount.toLocaleString('vi-VN')} VND`, inline: false },
        { name: 'üéØ B·∫°n ch·ªçn', value: 'M·∫∑t Ng·ª≠a üëë', inline: true },
        { name: 'üé≤ K·∫øt qu·∫£', value: result === 'üëë' ? 'M·∫∑t Ng·ª≠a üëë' : 'M·∫∑t S·∫•p ü¶Ö', inline: true }
      );

    if (playerChoice === result) {
      user.money += betAmount;
      resultEmbed.setDescription(`üéâ **TH·∫ÆNG!** +${betAmount.toLocaleString('vi-VN')} VND\nüí∞ T·ªïng ti·ªÅn: ${user.money.toLocaleString('vi-VN')} VND`);
      resultEmbed.setColor('#00FF00');
    } else {
      user.money -= betAmount;
      resultEmbed.setDescription(`üò¢ **THUA!** -${betAmount.toLocaleString('vi-VN')} VND\nüí∞ T·ªïng ti·ªÅn: ${user.money.toLocaleString('vi-VN')} VND`);
      resultEmbed.setColor('#FF0000');
    }

    userData[userId] = user;
    saveData();
    message.reply({ embeds: [resultEmbed] });
  }

  // FLIP COIN - M·∫∂T S·∫§P
  if (message.content.startsWith('!sap')) {
    const commandNow = Date.now();
    const cooldownTime = 3000;
    if (commandCooldown.has(message.author.id)) {
      const lastUsed = commandCooldown.get(message.author.id);
      if (commandNow - lastUsed < cooldownTime) {
        return message.reply('Vui l√≤ng ch·ªù m·ªôt ch√∫t tr∆∞·ªõc khi d√πng l·ªánh n√†y l·∫°i.');
      }
    }
    commandCooldown.set(message.author.id, commandNow);

    const userId = message.author.id;
    const user = userData[userId] || { money: 0, isSearchingJob: false };

    const args = message.content.split(' ');
    let betAmount;

    if (args[1] === 'all') {
      betAmount = user.money;
    } else {
      betAmount = parseInt(args[1]);
    }

    if (!betAmount || betAmount <= 0) {
      return message.reply('C√∫ ph√°p: `!sap <s·ªë ti·ªÅn>` ho·∫∑c `!sap all`\nV√≠ d·ª•: `!sap 10000`');
    }

    if (user.money < betAmount) {
      return message.reply(`B·∫°n kh√¥ng ƒë·ªß ti·ªÅn! B·∫°n ch·ªâ c√≥ ${user.money.toLocaleString('vi-VN')} VND.`);
    }

    const result = Math.random() < 0.5 ? 'üëë' : 'ü¶Ö';
    const playerChoice = 'ü¶Ö';

    const resultEmbed = new EmbedBuilder()
      .setTitle('ü™ô TUNG XU - M·∫∂T S·∫§P')
      .addFields(
        { name: 'üí∞ C∆∞·ª£c', value: `${betAmount.toLocaleString('vi-VN')} VND`, inline: false },
        { name: 'üéØ B·∫°n ch·ªçn', value: 'M·∫∑t S·∫•p ü¶Ö', inline: true },
        { name: 'üé≤ K·∫øt qu·∫£', value: result === 'üëë' ? 'M·∫∑t Ng·ª≠a üëë' : 'M·∫∑t S·∫•p ü¶Ö', inline: true }
      );

    if (playerChoice === result) {
      user.money += betAmount;
      resultEmbed.setDescription(`üéâ **TH·∫ÆNG!** +${betAmount.toLocaleString('vi-VN')} VND\nüí∞ T·ªïng ti·ªÅn: ${user.money.toLocaleString('vi-VN')} VND`);
      resultEmbed.setColor('#00FF00');
    } else {
      user.money -= betAmount;
      resultEmbed.setDescription(`üò¢ **THUA!** -${betAmount.toLocaleString('vi-VN')} VND\nüí∞ T·ªïng ti·ªÅn: ${user.money.toLocaleString('vi-VN')} VND`);
      resultEmbed.setColor('#FF0000');
    }

    userData[userId] = user;
    saveData();
    message.reply({ embeds: [resultEmbed] });
  }

  // SLOT MACHINE
  if (message.content.startsWith('!slot')) {
    const commandNow = Date.now();
    const cooldownTime = 3000;
    if (commandCooldown.has(message.author.id)) {
      const lastUsed = commandCooldown.get(message.author.id);
      if (commandNow - lastUsed < cooldownTime) {
        return message.reply('Vui l√≤ng ch·ªù m·ªôt ch√∫t tr∆∞·ªõc khi d√πng l·ªánh n√†y l·∫°i.');
      }
    }
    commandCooldown.set(message.author.id, commandNow);

    const userId = message.author.id;
    const user = userData[userId] || { money: 0, isSearchingJob: false };

    const args = message.content.split(' ');
    let betAmount;

    if (args[1] === 'all') {
      betAmount = user.money;
    } else {
      betAmount = parseInt(args[1]);
    }

    if (!betAmount || betAmount <= 0) {
      return message.reply('C√∫ ph√°p: `!slot <s·ªë ti·ªÅn>` ho·∫∑c `!slot all`\nV√≠ d·ª•: `!slot 10000`');
    }

    if (user.money < betAmount) {
      return message.reply(`B·∫°n kh√¥ng ƒë·ªß ti·ªÅn! B·∫°n ch·ªâ c√≥ ${user.money.toLocaleString('vi-VN')} VND.`);
    }

    const symbols = ['üçí', 'üçã', 'üçä', 'üçá', 'üîî', 'üíé', '7Ô∏è‚É£'];
    // T·ªâ l·ªá kh√¥ng th·ªÉ th·∫Øng cho ng∆∞·ªùi ch∆°i th∆∞·ªùng (T·ªïng 100%):
    // üçí: 75% - Thua ch·∫Øc ch·∫Øn, xu·∫•t hi·ªán nhi·ªÅu nh·∫•t
    // üçã: 24.95% - Thua ch·∫Øc ch·∫Øn
    // üçä: 0.049% - C·ª±c k·ª≥ kh√≥ x2 (1/2000)
    // üçá: 0.0007% - G·∫ßn nh∆∞ kh√¥ng th·ªÉ x3 (1/142,857)
    // üîî: 0.0002% - Kh√¥ng th·ªÉ x3 (1/500,000)
    // üíé: 0.0001% - B·∫•t kh·∫£ thi x3 (1/1,000,000)
    // 7Ô∏è‚É£: 0.00001% - Jackpot b·∫•t kh·∫£ thi (1/10,000,000)
    const normalWeights = [75, 24.95, 0.049, 0.0007, 0.0002, 0.0001, 0.00001];  // T·ªâ l·ªá kh√¥ng th·ªÉ th·∫Øng

    // T·ªâ l·ªá ƒë·∫∑c bi·ªát cho owner (T·ªïng 100%):
    // üçí: 0.1% - G·∫ßn nh∆∞ kh√¥ng thua
    // üçã: 0.1% - G·∫ßn nh∆∞ kh√¥ng thua
    // üçä: 8% - TƒÉng c∆° h·ªôi x2
    // üçá: 5% - TƒÉng t·ªâ l·ªá x3
    // üîî: 4% - TƒÉng t·ªâ l·ªá x3
    // üíé: 2.8% - TƒÉng t·ªâ l·ªá x3
    // 7Ô∏è‚É£: 80% - Jackpot si√™u d·ªÖ
    const ownerWeights = [0.1, 0.1, 8, 5, 4, 2.8, 80];  // T·ªâ l·ªá th·∫Øng g·∫ßn nh∆∞ tuy·ªát ƒë·ªëi cho owner

    function getRandomSymbol(isOwner = false, usedSymbols = []) {
      if (isOwner) {
        // Owner gi·ªØ nguy√™n logic c≈© ƒë·ªÉ d·ªÖ th·∫Øng
        const weights = ownerWeights;
        const totalWeight = weights.reduce((a, b) => a + b, 0);
        let random = Math.random() * totalWeight;
        for (let i = 0; i < symbols.length; i++) {
          if (random < weights[i]) return symbols[i];
          random -= weights[i];
        }
        return symbols[0];
      } else {
        // Ng∆∞·ªùi ch∆°i th∆∞·ªùng: 80% ra bi·ªÉu t∆∞·ª£ng kh√°c v·ªõi 2 bi·ªÉu t∆∞·ª£ng tr∆∞·ªõc
        const weights = normalWeights;
        if (Math.random() < 0.8 && usedSymbols.length > 0) {
          // L·∫•y danh s√°ch c√°c bi·ªÉu t∆∞·ª£ng ch∆∞a ƒë∆∞·ª£c d√πng
          const unusedSymbols = symbols.filter(s => !usedSymbols.includes(s));
          if (unusedSymbols.length > 0) {
            // T√≠nh t·ªïng weight c·ªßa c√°c bi·ªÉu t∆∞·ª£ng ch∆∞a d√πng
            const unusedWeights = unusedSymbols.map(s => weights[symbols.indexOf(s)]);
            const totalUnusedWeight = unusedWeights.reduce((a, b) => a + b, 0);
            let random = Math.random() * totalUnusedWeight;
            for (let i = 0; i < unusedSymbols.length; i++) {
              if (random < unusedWeights[i]) return unusedSymbols[i];
              random -= unusedWeights[i];
            }
            return unusedSymbols[0];
          }
        }
        // 20% c√≤n l·∫°i ho·∫∑c khi kh√¥ng c√≤n bi·ªÉu t∆∞·ª£ng m·ªõi: d√πng logic c≈©
        const totalWeight = weights.reduce((a, b) => a + b, 0);
        let random = Math.random() * totalWeight;
        for (let i = 0; i < symbols.length; i++) {
          if (random < weights[i]) return symbols[i];
          random -= weights[i];
        }
        return symbols[0];
      }
    }

    // Ki·ªÉm tra xem ng∆∞·ªùi ch∆°i c√≥ ph·∫£i l√† owner kh√¥ng
    const isOwner = message.author.id === ownerId;
    
    const usedSymbols = [];
    const slot1 = getRandomSymbol(isOwner, usedSymbols);
    usedSymbols.push(slot1);
    const slot2 = getRandomSymbol(isOwner, usedSymbols);
    usedSymbols.push(slot2);
    const slot3 = getRandomSymbol(isOwner, usedSymbols);

    const slotEmbed = new EmbedBuilder()
      .setTitle('üé∞ SLOT MACHINE')
      .setDescription(`\`\`\`\n[ ${slot1} | ${slot2} | ${slot3} ]\n\`\`\``)
      .addFields({ name: 'üí∞ C∆∞·ª£c', value: `${betAmount.toLocaleString('vi-VN')} VND`, inline: false })
      .setColor('#FF1493');

    let winMultiplier = 0;
    if (slot1 === slot2 && slot2 === slot3) {
      if (slot1 === '7Ô∏è‚É£') winMultiplier = 20;
      else if (slot1 === 'üíé') winMultiplier = 15;
      else if (slot1 === 'üîî') winMultiplier = 10;
      else winMultiplier = 5;
    } else if (slot1 === slot2 || slot2 === slot3 || slot1 === slot3) {
      winMultiplier = 2;
    }

    if (winMultiplier > 0) {
      const winAmount = betAmount * winMultiplier;
      user.money += winAmount;
      slotEmbed.addFields({ name: 'üéâ K·∫øt qu·∫£', value: `**TH·∫ÆNG!** x${winMultiplier}\n+${winAmount.toLocaleString('vi-VN')} VND`, inline: false });
      slotEmbed.setColor('#00FF00');
    } else {
      user.money -= betAmount;
      slotEmbed.addFields({ name: 'üò¢ K·∫øt qu·∫£', value: `**THUA!**\n-${betAmount.toLocaleString('vi-VN')} VND`, inline: false });
      slotEmbed.setColor('#FF0000');
    }

    slotEmbed.addFields({ name: 'üí∞ T·ªïng ti·ªÅn', value: `${user.money.toLocaleString('vi-VN')} VND`, inline: false });

    userData[userId] = user;
    saveData();
    message.reply({ embeds: [slotEmbed] });
  }

  // OWNER COMMANDS
  // Set Money
  if (message.content.startsWith('!setmoney')) {
    console.log(`Command user ID: ${message.author.id}, Owner ID: ${ownerId}, Match: ${message.author.id === ownerId}`);
    if (message.author.id !== ownerId) {
      return message.reply(`‚ùå Ch·ªâ owner m·ªõi c√≥ th·ªÉ d√πng l·ªánh n√†y!\nYour ID: ${message.author.id}\nOwner ID: ${ownerId}`);
    }

    const args = message.content.split(' ');
    if (args.length < 3) {
      return message.reply('C√∫ ph√°p: `!setmoney <@user ho·∫∑c userID> <s·ªë ti·ªÅn>`\nV√≠ d·ª•: `!setmoney @user 1000000`');
    }

    const targetUserId = args[1].replace(/[<@!>]/g, '');
    const amount = parseInt(args[2]);

    if (!amount || amount < 0) {
      return message.reply('S·ªë ti·ªÅn ph·∫£i l√† s·ªë d∆∞∆°ng!');
    }

    const targetUser = userData[targetUserId] || { 
      lastCheckin: null, streak: 0, totalCheckins: 0, 
      money: 0, xp: 0, lastLevel: 1, inventory: [], 
      lastWork: null, selectedJob: null, attemptsToday: 0, isSearchingJob: false 
    };

    targetUser.money = amount;
    userData[targetUserId] = targetUser;
    saveData();

    message.reply(`‚úÖ ƒê√£ set ti·ªÅn cho <@${targetUserId}> th√†nh ${amount.toLocaleString('vi-VN')} VND`);
  }

  // Add Money
  if (message.content.startsWith('!addmoney')) {
    if (message.author.id !== ownerId) {
      return message.reply('‚ùå Ch·ªâ owner m·ªõi c√≥ th·ªÉ d√πng l·ªánh n√†y!');
    }

    const args = message.content.split(' ');
    if (args.length < 3) {
      return message.reply('C√∫ ph√°p: `!addmoney <@user ho·∫∑c userID> <s·ªë ti·ªÅn>`\nV√≠ d·ª•: `!addmoney @user 500000`');
    }

    const targetUserId = args[1].replace(/[<@!>]/g, '');
    const amount = parseInt(args[2]);

    if (!amount) {
      return message.reply('S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá!');
    }

    const targetUser = userData[targetUserId] || { 
      lastCheckin: null, streak: 0, totalCheckins: 0, 
      money: 0, xp: 0, lastLevel: 1, inventory: [], 
      lastWork: null, selectedJob: null, attemptsToday: 0, isSearchingJob: false 
    };

    targetUser.money += amount;
    userData[targetUserId] = targetUser;
    saveData();

    message.reply(`‚úÖ ƒê√£ ${amount >= 0 ? 'th√™m' : 'tr·ª´'} ${Math.abs(amount).toLocaleString('vi-VN')} VND cho <@${targetUserId}>\nüí∞ T·ªïng ti·ªÅn hi·ªán t·∫°i: ${targetUser.money.toLocaleString('vi-VN')} VND`);
  }

  // Set Level
  if (message.content.startsWith('!setlevel')) {
    if (message.author.id !== ownerId) {
      return message.reply('‚ùå Ch·ªâ owner m·ªõi c√≥ th·ªÉ d√πng l·ªánh n√†y!');
    }

    const args = message.content.split(' ');
    if (args.length < 3) {
      return message.reply('C√∫ ph√°p: `!setlevel <@user ho·∫∑c userID> <level>`\nV√≠ d·ª•: `!setlevel @user 50`');
    }

    const targetUserId = args[1].replace(/[<@!>]/g, '');
    const level = parseInt(args[2]);

    if (!level || level < 1 || level > 1000) {
      return message.reply('Level ph·∫£i t·ª´ 1 ƒë·∫øn 1000!');
    }

    const targetUser = userData[targetUserId] || { 
      lastCheckin: null, streak: 0, totalCheckins: 0, 
      money: 0, xp: 0, lastLevel: 1, inventory: [], 
      lastWork: null, selectedJob: null, attemptsToday: 0, isSearchingJob: false 
    };

    // Calculate XP needed for target level
    let requiredXP = 0;
    for (let i = 1; i < level; i++) {
      requiredXP += i * 100 + (i - 1) * 50;
    }

    targetUser.xp = requiredXP;
    targetUser.lastLevel = level;
    userData[targetUserId] = targetUser;
    saveData();

    message.reply(`‚úÖ ƒê√£ set level cho <@${targetUserId}> th√†nh ${level}\nüìä XP hi·ªán t·∫°i: ${requiredXP}`);
  }

  // Add XP
  if (message.content.startsWith('!addxp')) {
    if (message.author.id !== ownerId) {
      return message.reply('‚ùå Ch·ªâ owner m·ªõi c√≥ th·ªÉ d√πng l·ªánh n√†y!');
    }

    const args = message.content.split(' ');
    if (args.length < 3) {
      return message.reply('C√∫ ph√°p: `!addxp <@user ho·∫∑c userID> <xp>`\nV√≠ d·ª•: `!addxp @user 1000`');
    }

    const targetUserId = args[1].replace(/[<@!>]/g, '');
    const xp = parseInt(args[2]);

    if (!xp) {
      return message.reply('XP kh√¥ng h·ª£p l·ªá!');
    }

    const targetUser = userData[targetUserId] || { 
      lastCheckin: null, streak: 0, totalCheckins: 0, 
      money: 0, xp: 0, lastLevel: 1, inventory: [], 
      lastWork: null, selectedJob: null, attemptsToday: 0, isSearchingJob: false 
    };

    targetUser.xp += xp;
    if (targetUser.xp < 0) targetUser.xp = 0;

    const { level } = getLevelInfo(targetUser.xp);
    targetUser.lastLevel = level;

    userData[targetUserId] = targetUser;
    saveData();

    message.reply(`‚úÖ ƒê√£ ${xp >= 0 ? 'th√™m' : 'tr·ª´'} ${Math.abs(xp)} XP cho <@${targetUserId}>\nüìä XP hi·ªán t·∫°i: ${targetUser.xp}\nüèÜ Level hi·ªán t·∫°i: ${level}`);
  }

  // Give Item
  if (message.content.startsWith('!giveitem')) {
    if (message.author.id !== ownerId) {
      return message.reply('‚ùå Ch·ªâ owner m·ªõi c√≥ th·ªÉ d√πng l·ªánh n√†y!');
    }

    const args = message.content.split(' ');
    if (args.length < 3) {
      return message.reply('C√∫ ph√°p: `!giveitem <@user ho·∫∑c userID> <s·ªë l∆∞·ª£ng>`\nV√≠ d·ª•: `!giveitem @user 5`');
    }

    const targetUserId = args[1].replace(/[<@!>]/g, '');
    const count = parseInt(args[2]) || 1;

    if (count < 1 || count > 50) {
      return message.reply('S·ªë l∆∞·ª£ng ph·∫£i t·ª´ 1 ƒë·∫øn 50!');
    }

    const targetUser = userData[targetUserId] || { 
      lastCheckin: null, streak: 0, totalCheckins: 0, 
      money: 0, xp: 0, lastLevel: 1, inventory: [], 
      lastWork: null, selectedJob: null, attemptsToday: 0, isSearchingJob: false 
    };

    targetUser.inventory = targetUser.inventory || [];
    const receivedItems = [];

    for (let i = 0; i < count; i++) {
      const item = getRandomItem();
      targetUser.inventory.push(item);
      receivedItems.push(item.name);
    }

    userData[targetUserId] = targetUser;
    saveData();

    const itemList = receivedItems.join(', ');
    message.reply(`‚úÖ ƒê√£ t·∫∑ng ${count} item cho <@${targetUserId}>:\nüéÅ ${itemList}`);
  }

  // Set Job
  if (message.content.startsWith('!setjob')) {
    if (message.author.id !== ownerId) {
      return message.reply('‚ùå Ch·ªâ owner m·ªõi c√≥ th·ªÉ d√πng l·ªánh n√†y!');
    }

    const args = message.content.split(' ');
    if (args.length < 3) {
      const jobList = jobs.map((j, i) => `${i + 1}. ${j.name}`).join('\n');
      return message.reply(`C√∫ ph√°p: \`!setjob <@user ho·∫∑c userID> <t√™n job>\`\n\n**Danh s√°ch job:**\n${jobList}\n\nV√≠ d·ª•: \`!setjob @user Coder\``);
    }

    const targetUserId = args[1].replace(/[<@!>]/g, '');
    const jobName = args.slice(2).join(' ');

    const job = jobs.find(j => j.name.toLowerCase() === jobName.toLowerCase());
    if (!job) {
      const jobList = jobs.map(j => j.name).join(', ');
      return message.reply(`‚ùå Job kh√¥ng t·ªìn t·∫°i!\n\n**Danh s√°ch job:** ${jobList}`);
    }

    const targetUser = userData[targetUserId] || { 
      lastCheckin: null, streak: 0, totalCheckins: 0, 
      money: 0, xp: 0, lastLevel: 1, inventory: [], 
      lastWork: null, selectedJob: null, attemptsToday: 0, isSearchingJob: false 
    };

    targetUser.selectedJob = job.name;
    targetUser.attemptsToday = 0;
    targetUser.lastWork = null;
    userData[targetUserId] = targetUser;
    saveData();

    message.reply(`‚úÖ ƒê√£ set job cho <@${targetUserId}> th√†nh **${job.name}**\nüí∞ L∆∞∆°ng: ${job.payPerHour.toLocaleString('vi-VN')} VND/gi·ªù`);
  }

  // Give Money to All
  if (message.content.startsWith('!givemoneyall')) {
    if (message.author.id !== ownerId) {
      return message.reply('‚ùå Ch·ªâ owner m·ªõi c√≥ th·ªÉ d√πng l·ªánh n√†y!');
    }

    const args = message.content.split(' ');
    const amount = parseInt(args[1]);

    if (!amount || amount <= 0) {
      return message.reply('C√∫ ph√°p: `!givemoneyall <s·ªë ti·ªÅn>`\nV√≠ d·ª•: `!givemoneyall 100000`');
    }

    let count = 0;
    for (let userId in userData) {
      userData[userId].money += amount;
      count++;
    }

    saveData();
    message.reply(`‚úÖ ƒê√£ t·∫∑ng ${amount.toLocaleString('vi-VN')} VND cho t·∫•t c·∫£ ${count} ng∆∞·ªùi ch∆°i!`);
  }

  // View User Data
  if (message.content.startsWith('!userdata')) {
    if (message.author.id !== ownerId) {
      return message.reply('‚ùå Ch·ªâ owner m·ªõi c√≥ th·ªÉ d√πng l·ªánh n√†y!');
    }

    const args = message.content.split(' ');
    if (args.length < 2) {
      return message.reply('C√∫ ph√°p: `!userdata <@user ho·∫∑c userID>`\nV√≠ d·ª•: `!userdata @user`');
    }

    const targetUserId = args[1].replace(/[<@!>]/g, '');
    const targetUser = userData[targetUserId];

    if (!targetUser) {
      return message.reply('‚ùå User ch∆∞a c√≥ data!');
    }

    const { level } = getLevelInfo(targetUser.xp);
    
    const embed = new EmbedBuilder()
      .setTitle(`üìä Data c·ªßa User ${targetUserId}`)
      .setColor('#0099FF')
      .addFields(
        { name: 'üí∞ Ti·ªÅn', value: `${targetUser.money.toLocaleString('vi-VN')} VND`, inline: true },
        { name: 'üìä XP', value: `${targetUser.xp}`, inline: true },
        { name: 'üèÜ Level', value: `${level}`, inline: true },
        { name: 'üî• Streak', value: `${targetUser.streak || 0} ng√†y`, inline: true },
        { name: 'üìÖ T·ªïng check-in', value: `${targetUser.totalCheckins || 0}`, inline: true },
        { name: 'üíº Ngh·ªÅ nghi·ªáp', value: targetUser.selectedJob || 'Ch∆∞a ch·ªçn', inline: true },
        { name: 'üéí S·ªë item', value: `${targetUser.inventory?.length || 0}`, inline: true },
        { name: 'üîç isSearchingJob', value: `${targetUser.isSearchingJob ? 'C√≥' : 'Kh√¥ng'}`, inline: true },
        { name: 'üéØ L·∫ßn th·ª≠ vi·ªác h√¥m nay', value: `${targetUser.attemptsToday || 0}/3`, inline: true }
      );

    message.reply({ embeds: [embed] });
  }

  // Set Streak
  if (message.content.startsWith('!setstreak')) {
    if (message.author.id !== ownerId) {
      return message.reply('‚ùå Ch·ªâ owner m·ªõi c√≥ th·ªÉ d√πng l·ªánh n√†y!');
    }

    const args = message.content.split(' ');
    if (args.length < 3) {
      return message.reply('C√∫ ph√°p: `!setstreak <@user ho·∫∑c userID> <s·ªë ng√†y>`\nV√≠ d·ª•: `!setstreak @user 7`');
    }

    const targetUserId = args[1].replace(/[<@!>]/g, '');
    const streak = parseInt(args[2]);

    if (!streak || streak < 0) {
      return message.reply('S·ªë ng√†y streak ph·∫£i l√† s·ªë d∆∞∆°ng!');
    }

    const targetUser = userData[targetUserId] || { 
      lastCheckin: null, streak: 0, totalCheckins: 0, 
      money: 0, xp: 0, lastLevel: 1, inventory: [], 
      lastWork: null, selectedJob: null, attemptsToday: 0, isSearchingJob: false 
    };

    targetUser.streak = streak;
    userData[targetUserId] = targetUser;
    saveData();

    message.reply(`‚úÖ ƒê√£ set streak cho <@${targetUserId}> th√†nh ${streak} ng√†y`);
  }

  // Reset All Data
  if (message.content === '!resetalldata') {
    if (message.author.id !== ownerId) {
      return message.reply('‚ùå Ch·ªâ owner m·ªõi c√≥ th·ªÉ d√πng l·ªánh n√†y!');
    }

    const confirmEmbed = new EmbedBuilder()
      .setTitle('‚ö†Ô∏è C·∫¢NH B√ÅO: X√ìA T·∫§T C·∫¢ D·ªÆ LI·ªÜU')
      .setDescription('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a to√†n b·ªô d·ªØ li·ªáu c·ªßa t·∫•t c·∫£ ng∆∞·ªùi ch∆°i?\nReact ‚úÖ ƒë·ªÉ x√°c nh·∫≠n ho·∫∑c ‚ùå ƒë·ªÉ h·ªßy.')
      .setColor('#FF0000');

    const confirmMsg = await message.reply({ embeds: [confirmEmbed] });
    await confirmMsg.react('‚úÖ');
    await confirmMsg.react('‚ùå');

    const filter = (reaction, user) => 
      ['‚úÖ', '‚ùå'].includes(reaction.emoji.name) && user.id === message.author.id;

    const collector = confirmMsg.createReactionCollector({ filter, time: 30000 });

    collector.on('collect', async (reaction) => {
      if (reaction.emoji.name === '‚úÖ') {
        userData = {};
        saveData();
        profileProcessing.clear();
        lastMessageTime.clear();
        commandCooldown.clear();
        await confirmMsg.reactions.removeAll();
        message.reply('‚úÖ ƒê√£ x√≥a to√†n b·ªô d·ªØ li·ªáu th√†nh c√¥ng!');
      } else {
        await confirmMsg.reactions.removeAll();
        message.reply('‚ùå ƒê√£ h·ªßy l·ªánh x√≥a d·ªØ li·ªáu.');
      }
      collector.stop();
    });

    collector.on('end', async (collected, reason) => {
      if (reason === 'time') {
        await confirmMsg.reactions.removeAll();
        message.reply('‚ùå H·∫øt th·ªùi gian x√°c nh·∫≠n, l·ªánh ƒë√£ b·ªã h·ªßy.');
      }
    });
  }

  // Top Richest Players
  if (message.content === '!toprich') {
    const topPlayers = Object.entries(userData)
      .sort(([,a], [,b]) => b.money - a.money)
      .slice(0, 10);

    if (topPlayers.length === 0) {
      return message.reply('Ch∆∞a c√≥ d·ªØ li·ªáu ng∆∞·ªùi ch∆°i!');
    }

    let desc = '';
    for (let i = 0; i < topPlayers.length; i++) {
      const [userId, user] = topPlayers[i];
      desc += `${i + 1}. <@${userId}> - ${user.money.toLocaleString('vi-VN')} VND\n`;
    }

    const embed = new EmbedBuilder()
      .setTitle('üí∞ TOP 10 NG∆Ø·ªúI GI√ÄU NH·∫§T')
      .setDescription(desc)
      .setColor('#FFD700')
      .setFooter({ text: 'C·∫≠p nh·∫≠t theo th·ªùi gian th·ª±c' });

    message.reply({ embeds: [embed] });
  }

  // Top Level Players
  if (message.content === '!toplevel') {
    const topPlayers = Object.entries(userData)
      .map(([id, user]) => ({
        id,
        level: getLevelInfo(user.xp).level,
        xp: user.xp
      }))
      .sort((a, b) => b.level - a.level || b.xp - a.xp)
      .slice(0, 10);

    if (topPlayers.length === 0) {
      return message.reply('Ch∆∞a c√≥ d·ªØ li·ªáu ng∆∞·ªùi ch∆°i!');
    }

    let desc = '';
    for (let i = 0; i < topPlayers.length; i++) {
      const player = topPlayers[i];
      desc += `${i + 1}. <@${player.id}> - Level ${player.level} (${player.xp} XP)\n`;
    }

    const embed = new EmbedBuilder()
      .setTitle('üèÜ TOP 10 LEVEL CAO NH·∫§T')
      .setDescription(desc)
      .setColor('#FF69B4')
      .setFooter({ text: 'C·∫≠p nh·∫≠t theo th·ªùi gian th·ª±c' });

    message.reply({ embeds: [embed] });
  }

  // Find Rich Players
  if (message.content.startsWith('!findrich')) {
    if (message.author.id !== ownerId) {
      return message.reply('‚ùå Ch·ªâ owner m·ªõi c√≥ th·ªÉ d√πng l·ªánh n√†y!');
    }

    const args = message.content.split(' ');
    const minMoney = parseInt(args[1]) || 1000000; // M·∫∑c ƒë·ªãnh 1 tri·ªáu

    const richPlayers = Object.entries(userData)
      .filter(([,user]) => user.money >= minMoney)
      .sort(([,a], [,b]) => b.money - a.money);

    if (richPlayers.length === 0) {
      return message.reply(`Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi ch∆°i c√≥ t·ª´ ${minMoney.toLocaleString('vi-VN')} VND tr·ªü l√™n!`);
    }

    let desc = `**Danh s√°ch ng∆∞·ªùi ch∆°i c√≥ t·ª´ ${minMoney.toLocaleString('vi-VN')} VND tr·ªü l√™n:**\n\n`;
    for (const [userId, user] of richPlayers) {
      desc += `<@${userId}> - ${user.money.toLocaleString('vi-VN')} VND\n`;
    }

    const embed = new EmbedBuilder()
      .setTitle('üîç T√åM NG∆Ø·ªúI CH∆†I GI√ÄU')
      .setDescription(desc)
      .setColor('#4169E1')
      .setFooter({ text: `T√¨m th·∫•y ${richPlayers.length} ng∆∞·ªùi ch∆°i` });

    message.reply({ embeds: [embed] });
  }

  // Shop commands
  if (message.content === '!shop') {
    const embed = new EmbedBuilder()
      .setTitle('üè™ SHOP')
      .setDescription('Ch·ªçn danh m·ª•c b·∫°n mu·ªën xem:')
      .addFields(
        { 
          name: 'üìú DANH M·ª§C', 
          value: 'üëï `!shop fashion` - C·ª≠a h√†ng th·ªùi trang\nüê± `!shop pets` - C·ª≠a h√†ng th√∫ c∆∞ng\nüöó `!shop vehicles` - C·ª≠a h√†ng ph∆∞∆°ng ti·ªán', 
          inline: false 
        },
        {
          name: 'üõçÔ∏è C√ÅCH MUA H√ÄNG',
          value: 'S·ª≠ d·ª•ng l·ªánh `!buy <itemID>` ƒë·ªÉ mua v·∫≠t ph·∫©m\nV√≠ d·ª•: `!buy F1`, `!buy P1`, `!buy V1`',
          inline: false
        }
      )
      .setColor('#FF69B4')
      .setFooter({ text: 'S·ª≠ d·ª•ng !inventory ƒë·ªÉ xem t√∫i ƒë·ªì c·ªßa b·∫°n' });

    message.reply({ embeds: [embed] });
    return;
  }

  if (message.content.startsWith('!shop ')) {
    const category = message.content.split(' ')[1];
    if (!['fashion', 'pets', 'vehicles'].includes(category)) {
      return message.reply('Danh m·ª•c kh√¥ng h·ª£p l·ªá! S·ª≠ d·ª•ng `!shop` ƒë·ªÉ xem danh s√°ch danh m·ª•c.');
    }

    const itemsList = getShopItemsList(category, false);
    const categoryTitles = {
      fashion: 'üëï C·ª¨A H√ÄNG TH·ªúI TRANG',
      pets: 'üê± C·ª¨A H√ÄNG TH√ö C∆ØNG',
      vehicles: 'üöó C·ª¨A H√ÄNG PH∆Ø∆†NG TI·ªÜN'
    };

    const embed = new EmbedBuilder()
      .setTitle(categoryTitles[category])
      .setDescription(itemsList)
      .setColor('#FF69B4')
      .setFooter({ text: 'S·ª≠ d·ª•ng !buy <itemID> ƒë·ªÉ mua v·∫≠t ph·∫©m' });

    message.reply({ embeds: [embed] });
    return;
  }

  // Banking Commands
  if (message.content === '!bank' || message.content === '!banking') {
    const userId = message.author.id;
    const user = userData[userId] || { 
      lastCheckin: null, streak: 0, totalCheckins: 0, 
      money: 0, xp: 0, lastLevel: 1, inventory: [], 
      lastWork: null, selectedJob: null, attemptsToday: 0, 
      isSearchingJob: false 
    };

    if (!user.banking) createBankingProfile(userId);

    const embed = new EmbedBuilder()
      .setTitle('üè¶ NG√ÇN H√ÄNG')
      .addFields(
        { name: 'üí∞ S·ªë d∆∞ t√†i kho·∫£n', value: `${user.banking.balance.toLocaleString('vi-VN')} VND`, inline: true },
        { name: 'üíµ Ti·ªÅn m·∫∑t', value: `${user.money.toLocaleString('vi-VN')} VND`, inline: true },
        { name: 'üìÖ Ng√†y m·ªü TK', value: new Date(user.banking.createdAt).toLocaleDateString('vi-VN'), inline: true },
        { name: 'üìù DANH S√ÅCH L·ªÜNH', value: 
          '`!deposit <s·ªë ti·ªÅn>` - N·∫°p ti·ªÅn v√†o t√†i kho·∫£n\n' +
          '`!withdraw <s·ªë ti·ªÅn>` - R√∫t ti·ªÅn t·ª´ t√†i kho·∫£n\n' +
          '`!transfer <@user> <s·ªë ti·ªÅn> [ghi ch√∫]` - Chuy·ªÉn ti·ªÅn cho ng∆∞·ªùi kh√°c\n' +
          '`!history` - Xem l·ªãch s·ª≠ giao d·ªãch', inline: false }
      )
      .setColor('#00FF00');

    message.reply({ embeds: [embed] });
    return;
  }

  if (message.content.startsWith('!deposit ')) {
    const userId = message.author.id;
    const user = userData[userId] || { 
      lastCheckin: null, streak: 0, totalCheckins: 0, 
      money: 0, xp: 0, lastLevel: 1, inventory: [], 
      lastWork: null, selectedJob: null, attemptsToday: 0, 
      isSearchingJob: false 
    };

    if (!user.banking) createBankingProfile(userId);

    let amount;
    const amountArg = message.content.split(' ')[1];
    
    if (amountArg.toLowerCase() === 'all') {
      amount = user.money;
    } else {
      amount = parseInt(amountArg);
    }

    if (!amount || amount <= 0) {
      return message.reply('‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá!\nS·ª≠ d·ª•ng `!deposit all` ƒë·ªÉ n·∫°p to√†n b·ªô ti·ªÅn m·∫∑t.');
    }

    if (user.money < amount) {
      return message.reply('‚ùå B·∫°n kh√¥ng ƒë·ªß ti·ªÅn m·∫∑t ƒë·ªÉ n·∫°p!');
    }

    user.money -= amount;
    user.banking.balance += amount;
    addTransaction(userId, 'deposit', amount, 'N·∫°p ti·ªÅn v√†o t√†i kho·∫£n');
    saveData();

    const embed = new EmbedBuilder()
      .setTitle('üì• N·∫†P TI·ªÄN TH√ÄNH C√îNG')
      .addFields(
        { name: 'üí∞ S·ªë ti·ªÅn n·∫°p', value: `${amount.toLocaleString('vi-VN')} VND`, inline: true },
        { name: 'üí≥ S·ªë d∆∞ m·ªõi', value: `${user.banking.balance.toLocaleString('vi-VN')} VND`, inline: true },
        { name: 'üíµ Ti·ªÅn m·∫∑t c√≤n l·∫°i', value: `${user.money.toLocaleString('vi-VN')} VND`, inline: true }
      )
      .setColor('#00FF00');

    message.reply({ embeds: [embed] });
    return;
  }

  if (message.content.startsWith('!withdraw ')) {
    const userId = message.author.id;
    const user = userData[userId] || { 
      lastCheckin: null, streak: 0, totalCheckins: 0, 
      money: 0, xp: 0, lastLevel: 1, inventory: [], 
      lastWork: null, selectedJob: null, attemptsToday: 0, 
      isSearchingJob: false 
    };

    if (!user.banking) createBankingProfile(userId);

    let amount;
    const amountArg = message.content.split(' ')[1];
    
    if (amountArg.toLowerCase() === 'all') {
      amount = user.banking.balance;
    } else {
      amount = parseInt(amountArg);
    }

    if (!amount || amount <= 0) {
      return message.reply('‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá!\nS·ª≠ d·ª•ng `!withdraw all` ƒë·ªÉ r√∫t to√†n b·ªô s·ªë d∆∞.');
    }

    if (user.banking.balance < amount) {
      return message.reply('‚ùå S·ªë d∆∞ t√†i kho·∫£n kh√¥ng ƒë·ªß!');
    }

    user.banking.balance -= amount;
    user.money += amount;
    addTransaction(userId, 'withdraw', amount, 'R√∫t ti·ªÅn t·ª´ t√†i kho·∫£n');
    saveData();

    const embed = new EmbedBuilder()
      .setTitle('üì§ R√öT TI·ªÄN TH√ÄNH C√îNG')
      .addFields(
        { name: 'üí∞ S·ªë ti·ªÅn r√∫t', value: `${amount.toLocaleString('vi-VN')} VND`, inline: true },
        { name: 'üí≥ S·ªë d∆∞ c√≤n l·∫°i', value: `${user.banking.balance.toLocaleString('vi-VN')} VND`, inline: true },
        { name: 'üíµ Ti·ªÅn m·∫∑t hi·ªán c√≥', value: `${user.money.toLocaleString('vi-VN')} VND`, inline: true }
      )
      .setColor('#00FF00');

    message.reply({ embeds: [embed] });
    return;
  }

  if (message.content.startsWith('!transfer ')) {
    const userId = message.author.id;
    const user = userData[userId] || { 
      lastCheckin: null, streak: 0, totalCheckins: 0, 
      money: 0, xp: 0, lastLevel: 1, inventory: [], 
      lastWork: null, selectedJob: null, attemptsToday: 0, 
      isSearchingJob: false 
    };

    if (!user.banking) createBankingProfile(userId);

    const args = message.content.split(' ');
    if (args.length < 3) {
      return message.reply('‚ùå C√∫ ph√°p: `!transfer <@user> <s·ªë ti·ªÅn> [ghi ch√∫]`');
    }

    const targetId = args[1].replace(/[<@!>]/g, '');
    if (targetId === userId) {
      return message.reply('‚ùå B·∫°n kh√¥ng th·ªÉ chuy·ªÉn ti·ªÅn cho ch√≠nh m√¨nh!');
    }

    let amount;
    if (args[2].toLowerCase() === 'all') {
      amount = user.banking.balance;
      if (amount <= 0) {
        return message.reply('‚ùå S·ªë d∆∞ t√†i kho·∫£n c·ªßa b·∫°n l√† 0 VND!');
      }
    } else {
      amount = parseInt(args[2]);
      if (isNaN(amount)) {
        return message.reply('‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá!\nüí° V√≠ d·ª•: `!transfer <@user> 100000` ho·∫∑c `!transfer <@user> all`');
      }
    }

    if (amount < 1) {
      return message.reply('‚ùå S·ªë ti·ªÅn chuy·ªÉn ph·∫£i l·ªõn h∆°n 0 VND!');
    }

    if (user.banking.balance < amount) {
      return message.reply(`‚ùå S·ªë d∆∞ t√†i kho·∫£n kh√¥ng ƒë·ªß!\nüí∞ S·ªë d∆∞ hi·ªán t·∫°i: ${user.banking.balance.toLocaleString('vi-VN')} VND`);
    }

    const targetUser = userData[targetId];
    if (!targetUser) {
      return message.reply('‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi nh·∫≠n!');
    }

    if (!targetUser.banking) createBankingProfile(targetId);

    const note = args.slice(3).join(' ') || 'Kh√¥ng c√≥ ghi ch√∫';

    // Th·ª±c hi·ªán chuy·ªÉn ti·ªÅn
    user.banking.balance -= amount;
    targetUser.banking.balance += amount;

    // Ghi transaction cho c·∫£ 2 b√™n
    addTransaction(userId, 'transfer_out', amount, note, targetId);
    addTransaction(targetId, 'transfer_in', amount, note, userId);
    
    saveData();

    const embed = new EmbedBuilder()
      .setTitle('üí∏ CHUY·ªÇN TI·ªÄN TH√ÄNH C√îNG')
      .addFields(
        { name: 'üë• Ng∆∞·ªùi nh·∫≠n', value: `<@${targetId}>`, inline: true },
        { name: 'üí∞ S·ªë ti·ªÅn', value: `${amount.toLocaleString('vi-VN')} VND`, inline: true },
        { name: 'üí≥ S·ªë d∆∞ c√≤n l·∫°i', value: `${user.banking.balance.toLocaleString('vi-VN')} VND`, inline: true },
        { name: 'üí¨ Ghi ch√∫', value: note, inline: false }
      )
      .setColor('#00FF00');

    message.reply({ embeds: [embed] });

    // G·ª≠i th√¥ng b√°o cho ng∆∞·ªùi nh·∫≠n
    const notifyEmbed = new EmbedBuilder()
      .setTitle('üí∞ NH·∫¨N TI·ªÄN TH√ÄNH C√îNG')
      .addFields(
        { name: 'üë§ Ng∆∞·ªùi g·ª≠i', value: `<@${userId}>`, inline: true },
        { name: 'üí∞ S·ªë ti·ªÅn', value: `${amount.toLocaleString('vi-VN')} VND`, inline: true },
        { name: 'üí≥ S·ªë d∆∞ m·ªõi', value: `${targetUser.banking.balance.toLocaleString('vi-VN')} VND`, inline: true },
        { name: 'üí¨ Ghi ch√∫', value: note, inline: false }
      )
      .setColor('#00FF00');

    const targetMember = message.guild.members.cache.get(targetId);
    if (targetMember) {
      targetMember.send({ embeds: [notifyEmbed] }).catch(() => {
        // N·∫øu kh√¥ng g·ª≠i ƒë∆∞·ª£c DM, g·ª≠i v√†o k√™nh hi·ªán t·∫°i
        message.channel.send({ content: `<@${targetId}>`, embeds: [notifyEmbed] });
      });
    }

    return;
  }

  if (message.content === '!history') {
    const userId = message.author.id;
    const user = userData[userId] || { 
      lastCheckin: null, streak: 0, totalCheckins: 0, 
      money: 0, xp: 0, lastLevel: 1, inventory: [], 
      lastWork: null, selectedJob: null, attemptsToday: 0, 
      isSearchingJob: false 
    };

    if (!user.banking) createBankingProfile(userId);

    const history = formatTransactionHistory(user.banking.transactions, userData);
    
    const embed = new EmbedBuilder()
      .setTitle('üìú L·ªäCH S·ª¨ GIAO D·ªäCH')
      .setDescription(history)
      .addFields(
        { name: 'üí≥ S·ªë d∆∞ hi·ªán t·∫°i', value: `${user.banking.balance.toLocaleString('vi-VN')} VND`, inline: true },
        { name: 'üíµ Ti·ªÅn m·∫∑t', value: `${user.money.toLocaleString('vi-VN')} VND`, inline: true }
      )
      .setColor('#4169E1')
      .setFooter({ text: 'Hi·ªÉn th·ªã 10 giao d·ªãch g·∫ßn nh·∫•t' });

    message.reply({ embeds: [embed] });
    return;
  }

  if (message.content.startsWith('!buy ')) {
    const itemId = message.content.split(' ')[1].toUpperCase();
    const userId = message.author.id;
    const user = userData[userId] || { 
      lastCheckin: null, streak: 0, totalCheckins: 0, 
      money: 0, xp: 0, lastLevel: 1, inventory: [], 
      lastWork: null, selectedJob: null, attemptsToday: 0, 
      isSearchingJob: false 
    };

    const item = findItemById(itemId);
    if (!item) {
      return message.reply('‚ùå M√£ v·∫≠t ph·∫©m kh√¥ng h·ª£p l·ªá!');
    }

    if (item.type !== 'shop') {
      return message.reply('‚ùå V·∫≠t ph·∫©m n√†y kh√¥ng b√°n trong shop!');
    }

    const price = item.price;
    if (user.money < price) {
      return message.reply(`‚ùå B·∫°n kh√¥ng ƒë·ªß ti·ªÅn! B·∫°n c·∫ßn th√™m ${(price - user.money).toLocaleString('vi-VN')} VND n·ªØa.`);
    }

    // Th√™m th√¥ng tin b·ªï sung khi mua
    const purchasedItem = {
      ...item,
      purchaseDate: new Date().toISOString(),
      canSell: true
    };

    user.money -= price;
    user.inventory = user.inventory || [];
    user.inventory.push(purchasedItem);
    userData[userId] = user;
    saveData();

    let desc = `‚úÖ ƒê√£ mua th√†nh c√¥ng: **${item.name}**\nüí∞ Gi√°: ${price.toLocaleString('vi-VN')} VND\nüíµ S·ªë d∆∞ c√≤n l·∫°i: ${user.money.toLocaleString('vi-VN')} VND`;
    
    if (item.category === 'pets') {
      desc += `\n\nüêæ Th√¥ng tin th√∫ c∆∞ng:\nLo·∫°i: ${item.type}\nTh·ª©c ƒÉn: ${item.food}`;
    } else if (item.category === 'vehicles') {
      desc += `\n\nüöó Th√¥ng tin ph∆∞∆°ng ti·ªán:\nLo·∫°i: ${item.type}\nNhi√™n li·ªáu: ${item.fuel}`;
    }

    const embed = new EmbedBuilder()
      .setTitle('üõçÔ∏è MUA H√ÄNG TH√ÄNH C√îNG')
      .setDescription(desc)
      .setColor('#00FF00');

    message.reply({ embeds: [embed] });
    return;
  }

  // Server Stats
  if (message.content === '!serverstats') {
    if (message.author.id !== ownerId) {
      return message.reply('‚ùå Ch·ªâ owner m·ªõi c√≥ th·ªÉ d√πng l·ªánh n√†y!');
    }

    const totalPlayers = Object.keys(userData).length;
    const totalMoney = Object.values(userData).reduce((sum, user) => sum + user.money, 0);
    const avgMoney = totalPlayers > 0 ? Math.floor(totalMoney / totalPlayers) : 0;
    
    const totalXP = Object.values(userData).reduce((sum, user) => sum + user.xp, 0);
    const avgXP = totalPlayers > 0 ? Math.floor(totalXP / totalPlayers) : 0;

    const activeJobs = Object.values(userData)
      .filter(user => user.selectedJob)
      .reduce((acc, user) => {
        acc[user.selectedJob] = (acc[user.selectedJob] || 0) + 1;
        return acc;
      }, {});

    let jobStats = '';
    for (const [job, count] of Object.entries(activeJobs)) {
      jobStats += `${job}: ${count} ng∆∞·ªùi\n`;
    }

    const embed = new EmbedBuilder()
      .setTitle('üìä TH·ªêNG K√ä SERVER')
      .addFields(
        { name: 'üë• T·ªïng ng∆∞·ªùi ch∆°i', value: totalPlayers.toString(), inline: true },
        { name: 'üí∞ T·ªïng ti·ªÅn', value: `${totalMoney.toLocaleString('vi-VN')} VND`, inline: true },
        { name: 'üíµ Ti·ªÅn trung b√¨nh', value: `${avgMoney.toLocaleString('vi-VN')} VND`, inline: true },
        { name: 'üìà T·ªïng XP', value: totalXP.toString(), inline: true },
        { name: 'üìä XP trung b√¨nh', value: avgXP.toString(), inline: true },
        { name: '\u200B', value: '\u200B', inline: true },
        { name: 'üíº Th·ªëng k√™ ngh·ªÅ nghi·ªáp', value: jobStats || 'Kh√¥ng c√≥ d·ªØ li·ªáu', inline: false }
      )
      .setColor('#32CD32')
      .setFooter({ text: 'C·∫≠p nh·∫≠t theo th·ªùi gian th·ª±c' });

    message.reply({ embeds: [embed] });
  }

  // List all items
  if (message.content === '!listitems' || message.content === '!itemslist') {
    const isOwner = message.author.id === ownerId;
    const itemsList = getAllItemsList(isOwner);
    
    const embed = new EmbedBuilder()
      .setTitle('üì¶ DANH S√ÅCH V·∫¨T PH·∫®M')
      .setDescription(itemsList)
      .addFields(
        { 
          name: 'üéØ ƒê·ªô Hi·∫øm', 
          value: '‚ö™ Th∆∞·ªùng (40%)\nüü¢ Ph·ª• ki·ªán (30%)\nüîµ Hi·∫øm (20%)\nüü£ C·ª±c Hi·∫øm (9.99%)\nüü° Si√™u Hi·∫øm (0.0099%)\nüî¥ Th·∫ßn Tho·∫°i (0.0001%)', 
          inline: false 
        }
      )
      .setColor('#4169E1');

    if (isOwner) {
      embed.setFooter({ text: '[OWNER] B·∫°n ƒëang xem danh s√°ch ƒë·∫ßy ƒë·ªß v·ªõi ID v√† gi√° tr·ªã' });
    } else {
      embed.setFooter({ text: 'Nh·∫≠n v·∫≠t ph·∫©m th√¥ng qua: L√™n level, Check-in, Event' });
    }

    message.reply({ embeds: [embed] });
  }

  // Give item by ID
  if (message.content.startsWith('!giveitemid')) {
    if (message.author.id !== ownerId) {
      return message.reply('‚ùå Ch·ªâ owner m·ªõi c√≥ th·ªÉ d√πng l·ªánh n√†y!');
    }

    const args = message.content.split(' ');
    if (args.length < 3) {
      return message.reply('C√∫ ph√°p: `!giveitemid <@user ho·∫∑c userID> <itemID> [s·ªë l∆∞·ª£ng]`\nV√≠ d·ª•: `!giveitemid @user SSUR1 1`\nD√πng `!listitems` ƒë·ªÉ xem danh s√°ch ID');
    }

    const targetUserId = args[1].replace(/[<@!>]/g, '');
    const itemId = args[2].toUpperCase();
    const quantity = parseInt(args[3]) || 1;

    if (quantity < 1 || quantity > 50) {
      return message.reply('S·ªë l∆∞·ª£ng ph·∫£i t·ª´ 1 ƒë·∫øn 50!');
    }

    const item = findItemById(itemId);
    if (!item) {
      return message.reply('‚ùå Kh√¥ng t√¨m th·∫•y item v·ªõi ID n√†y! D√πng `!listitems` ƒë·ªÉ xem danh s√°ch ID');
    }

    const targetUser = userData[targetUserId] || { 
      lastCheckin: null, streak: 0, totalCheckins: 0, 
      money: 0, xp: 0, lastLevel: 1, inventory: [], 
      lastWork: null, selectedJob: null, attemptsToday: 0, isSearchingJob: false 
    };

    targetUser.inventory = targetUser.inventory || [];
    
    for (let i = 0; i < quantity; i++) {
      targetUser.inventory.push(item);
    }

    userData[targetUserId] = targetUser;
    saveData();

    const embed = new EmbedBuilder()
      .setTitle('üéÅ T·∫∂NG V·∫¨T PH·∫®M')
      .setDescription(`ƒê√£ t·∫∑ng cho <@${targetUserId}>:`)
      .addFields(
        { name: 'üì¶ V·∫≠t ph·∫©m', value: `${item.name} (${item.id})`, inline: true },
        { name: 'üìä S·ªë l∆∞·ª£ng', value: quantity.toString(), inline: true },
        { name: 'üí∞ Gi√° tr·ªã', value: `${item.sellPrice.toLocaleString('vi-VN')} VND`, inline: true },
        { name: 'üéØ ƒê·ªô hi·∫øm', value: item.rarity.toUpperCase(), inline: true }
      )
      .setColor('#FF69B4');

    message.reply({ embeds: [embed] });
  }

  // End of message handler
  });
});

client.login(token);